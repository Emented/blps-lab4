/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_JOB_EXCEPTION
import emented.jooq.main.indexes.ACT_IDX_JOB_EXECUTION_ID
import emented.jooq.main.indexes.ACT_IDX_JOB_HANDLER
import emented.jooq.main.indexes.ACT_IDX_JOB_HANDLER_TYPE
import emented.jooq.main.indexes.ACT_IDX_JOB_JOB_DEF_ID
import emented.jooq.main.indexes.ACT_IDX_JOB_PROCINST
import emented.jooq.main.indexes.ACT_IDX_JOB_ROOT_PROCINST
import emented.jooq.main.indexes.ACT_IDX_JOB_TENANT_ID
import emented.jooq.main.keys.ACT_RU_JOB_PKEY
import emented.jooq.main.keys.ACT_RU_JOB__ACT_FK_JOB_EXCEPTION
import emented.jooq.main.tables.ActGeBytearray.ActGeBytearrayPath
import emented.jooq.main.tables.records.ActRuJobRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActRuJob(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActRuJobRecord>?,
    parentPath: InverseForeignKey<out Record, ActRuJobRecord>?,
    aliased: Table<ActRuJobRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActRuJobRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ru_job</code>
         */
        val ACT_RU_JOB: ActRuJob = ActRuJob()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActRuJobRecord> = ActRuJobRecord::class.java

    /**
     * The column <code>public.act_ru_job.id_</code>.
     */
    val ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_job.rev_</code>.
     */
    val REV_: TableField<ActRuJobRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_job.type_</code>.
     */
    val TYPE_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("type_"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_job.lock_exp_time_</code>.
     */
    val LOCK_EXP_TIME_: TableField<ActRuJobRecord, LocalDateTime?> =
        createField(DSL.name("lock_exp_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_ru_job.lock_owner_</code>.
     */
    val LOCK_OWNER_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("lock_owner_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_job.exclusive_</code>.
     */
    val EXCLUSIVE_: TableField<ActRuJobRecord, Boolean?> =
        createField(DSL.name("exclusive_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_ru_job.execution_id_</code>.
     */
    val EXECUTION_ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_job.root_proc_inst_id_</code>.
     */
    val ROOT_PROC_INST_ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_job.process_instance_id_</code>.
     */
    val PROCESS_INSTANCE_ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("process_instance_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_job.process_def_id_</code>.
     */
    val PROCESS_DEF_ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("process_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_job.process_def_key_</code>.
     */
    val PROCESS_DEF_KEY_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("process_def_key_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_job.retries_</code>.
     */
    val RETRIES_: TableField<ActRuJobRecord, Int?> = createField(DSL.name("retries_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_job.exception_stack_id_</code>.
     */
    val EXCEPTION_STACK_ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("exception_stack_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_job.exception_msg_</code>.
     */
    val EXCEPTION_MSG_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("exception_msg_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_ru_job.failed_act_id_</code>.
     */
    val FAILED_ACT_ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("failed_act_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_job.duedate_</code>.
     */
    val DUEDATE_: TableField<ActRuJobRecord, LocalDateTime?> =
        createField(DSL.name("duedate_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_ru_job.repeat_</code>.
     */
    val REPEAT_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("repeat_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_job.repeat_offset_</code>.
     */
    val REPEAT_OFFSET_: TableField<ActRuJobRecord, Long?> = createField(
        DSL.name("repeat_offset_"),
        SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)),
        this,
        ""
    )

    /**
     * The column <code>public.act_ru_job.handler_type_</code>.
     */
    val HANDLER_TYPE_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("handler_type_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_job.handler_cfg_</code>.
     */
    val HANDLER_CFG_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("handler_cfg_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_ru_job.deployment_id_</code>.
     */
    val DEPLOYMENT_ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("deployment_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_job.suspension_state_</code>.
     */
    val SUSPENSION_STATE_: TableField<ActRuJobRecord, Int?> = createField(
        DSL.name("suspension_state_"),
        SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)),
        this,
        ""
    )

    /**
     * The column <code>public.act_ru_job.job_def_id_</code>.
     */
    val JOB_DEF_ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("job_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_job.priority_</code>.
     */
    val PRIORITY_: TableField<ActRuJobRecord, Long?> = createField(
        DSL.name("priority_"),
        SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)),
        this,
        ""
    )

    /**
     * The column <code>public.act_ru_job.sequence_counter_</code>.
     */
    val SEQUENCE_COUNTER_: TableField<ActRuJobRecord, Long?> =
        createField(DSL.name("sequence_counter_"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.act_ru_job.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_job.create_time_</code>.
     */
    val CREATE_TIME_: TableField<ActRuJobRecord, LocalDateTime?> =
        createField(DSL.name("create_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_ru_job.last_failure_log_id_</code>.
     */
    val LAST_FAILURE_LOG_ID_: TableField<ActRuJobRecord, String?> =
        createField(DSL.name("last_failure_log_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActRuJobRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuJobRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuJobRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ru_job</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ru_job</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ru_job</code> table reference
     */
    constructor() : this(DSL.name("act_ru_job"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActRuJobRecord>?,
        parentPath: InverseForeignKey<out Record, ActRuJobRecord>?
    ) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, ACT_RU_JOB, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActRuJobPath : ActRuJob, Path<ActRuJobRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActRuJobRecord>?,
            parentPath: InverseForeignKey<out Record, ActRuJobRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActRuJobRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActRuJobPath = ActRuJobPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActRuJobPath = ActRuJobPath(alias, this)
        override fun `as`(alias: Table<*>): ActRuJobPath = ActRuJobPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(
        ACT_IDX_JOB_EXCEPTION,
        ACT_IDX_JOB_EXECUTION_ID,
        ACT_IDX_JOB_HANDLER,
        ACT_IDX_JOB_HANDLER_TYPE,
        ACT_IDX_JOB_JOB_DEF_ID,
        ACT_IDX_JOB_PROCINST,
        ACT_IDX_JOB_ROOT_PROCINST,
        ACT_IDX_JOB_TENANT_ID
    )

    override fun getPrimaryKey(): UniqueKey<ActRuJobRecord> = ACT_RU_JOB_PKEY
    override fun getReferences(): List<ForeignKey<ActRuJobRecord, *>> = listOf(ACT_RU_JOB__ACT_FK_JOB_EXCEPTION)

    private lateinit var _actGeBytearray: ActGeBytearrayPath

    /**
     * Get the implicit join path to the <code>public.act_ge_bytearray</code>
     * table.
     */
    fun actGeBytearray(): ActGeBytearrayPath {
        if (!this::_actGeBytearray.isInitialized)
            _actGeBytearray = ActGeBytearrayPath(this, ACT_RU_JOB__ACT_FK_JOB_EXCEPTION, null)

        return _actGeBytearray
    }

    val actGeBytearray: ActGeBytearrayPath
        get(): ActGeBytearrayPath = actGeBytearray()

    override fun `as`(alias: String): ActRuJob = ActRuJob(DSL.name(alias), this)
    override fun `as`(alias: Name): ActRuJob = ActRuJob(alias, this)
    override fun `as`(alias: Table<*>): ActRuJob = ActRuJob(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActRuJob = ActRuJob(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActRuJob = ActRuJob(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActRuJob = ActRuJob(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActRuJob =
        ActRuJob(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActRuJob = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActRuJob = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActRuJob = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActRuJob = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActRuJob = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActRuJob =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActRuJob =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActRuJob = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActRuJob = where(DSL.notExists(select))
}
