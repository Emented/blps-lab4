/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_BYTEARRAY_NAME
import emented.jooq.main.indexes.ACT_IDX_BYTEARRAY_RM_TIME
import emented.jooq.main.indexes.ACT_IDX_BYTEARRAY_ROOT_PI
import emented.jooq.main.indexes.ACT_IDX_BYTEAR_DEPL
import emented.jooq.main.keys.ACT_GE_BYTEARRAY_PKEY
import emented.jooq.main.keys.ACT_GE_BYTEARRAY__ACT_FK_BYTEARR_DEPL
import emented.jooq.main.keys.ACT_RU_EXT_TASK__ACT_FK_EXT_TASK_ERROR_DETAILS
import emented.jooq.main.keys.ACT_RU_JOB__ACT_FK_JOB_EXCEPTION
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_BYTEARRAY
import emented.jooq.main.tables.ActReDeployment.ActReDeploymentPath
import emented.jooq.main.tables.ActRuExtTask.ActRuExtTaskPath
import emented.jooq.main.tables.ActRuJob.ActRuJobPath
import emented.jooq.main.tables.ActRuVariable.ActRuVariablePath
import emented.jooq.main.tables.records.ActGeBytearrayRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActGeBytearray(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActGeBytearrayRecord>?,
    parentPath: InverseForeignKey<out Record, ActGeBytearrayRecord>?,
    aliased: Table<ActGeBytearrayRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActGeBytearrayRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ge_bytearray</code>
         */
        val ACT_GE_BYTEARRAY: ActGeBytearray = ActGeBytearray()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActGeBytearrayRecord> = ActGeBytearrayRecord::class.java

    /**
     * The column <code>public.act_ge_bytearray.id_</code>.
     */
    val ID_: TableField<ActGeBytearrayRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ge_bytearray.rev_</code>.
     */
    val REV_: TableField<ActGeBytearrayRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ge_bytearray.name_</code>.
     */
    val NAME_: TableField<ActGeBytearrayRecord, String?> =
        createField(DSL.name("name_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ge_bytearray.deployment_id_</code>.
     */
    val DEPLOYMENT_ID_: TableField<ActGeBytearrayRecord, String?> =
        createField(DSL.name("deployment_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ge_bytearray.bytes_</code>.
     */
    val BYTES_: TableField<ActGeBytearrayRecord, ByteArray?> =
        createField(DSL.name("bytes_"), SQLDataType.BLOB, this, "")

    /**
     * The column <code>public.act_ge_bytearray.generated_</code>.
     */
    val GENERATED_: TableField<ActGeBytearrayRecord, Boolean?> =
        createField(DSL.name("generated_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_ge_bytearray.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActGeBytearrayRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ge_bytearray.type_</code>.
     */
    val TYPE_: TableField<ActGeBytearrayRecord, Int?> = createField(DSL.name("type_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ge_bytearray.create_time_</code>.
     */
    val CREATE_TIME_: TableField<ActGeBytearrayRecord, LocalDateTime?> =
        createField(DSL.name("create_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_ge_bytearray.root_proc_inst_id_</code>.
     */
    val ROOT_PROC_INST_ID_: TableField<ActGeBytearrayRecord, String?> =
        createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ge_bytearray.removal_time_</code>.
     */
    val REMOVAL_TIME_: TableField<ActGeBytearrayRecord, LocalDateTime?> =
        createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<ActGeBytearrayRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActGeBytearrayRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActGeBytearrayRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ge_bytearray</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ge_bytearray</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ge_bytearray</code> table reference
     */
    constructor() : this(DSL.name("act_ge_bytearray"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActGeBytearrayRecord>?,
        parentPath: InverseForeignKey<out Record, ActGeBytearrayRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_GE_BYTEARRAY,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActGeBytearrayPath : ActGeBytearray, Path<ActGeBytearrayRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActGeBytearrayRecord>?,
            parentPath: InverseForeignKey<out Record, ActGeBytearrayRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActGeBytearrayRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActGeBytearrayPath = ActGeBytearrayPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActGeBytearrayPath = ActGeBytearrayPath(alias, this)
        override fun `as`(alias: Table<*>): ActGeBytearrayPath = ActGeBytearrayPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> =
        listOf(ACT_IDX_BYTEAR_DEPL, ACT_IDX_BYTEARRAY_NAME, ACT_IDX_BYTEARRAY_RM_TIME, ACT_IDX_BYTEARRAY_ROOT_PI)

    override fun getPrimaryKey(): UniqueKey<ActGeBytearrayRecord> = ACT_GE_BYTEARRAY_PKEY
    override fun getReferences(): List<ForeignKey<ActGeBytearrayRecord, *>> =
        listOf(ACT_GE_BYTEARRAY__ACT_FK_BYTEARR_DEPL)

    private lateinit var _actReDeployment: ActReDeploymentPath

    /**
     * Get the implicit join path to the <code>public.act_re_deployment</code>
     * table.
     */
    fun actReDeployment(): ActReDeploymentPath {
        if (!this::_actReDeployment.isInitialized)
            _actReDeployment = ActReDeploymentPath(this, ACT_GE_BYTEARRAY__ACT_FK_BYTEARR_DEPL, null)

        return _actReDeployment
    }

    val actReDeployment: ActReDeploymentPath
        get(): ActReDeploymentPath = actReDeployment()

    private lateinit var _actRuExtTask: ActRuExtTaskPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_ext_task</code> table
     */
    fun actRuExtTask(): ActRuExtTaskPath {
        if (!this::_actRuExtTask.isInitialized)
            _actRuExtTask = ActRuExtTaskPath(this, null, ACT_RU_EXT_TASK__ACT_FK_EXT_TASK_ERROR_DETAILS.inverseKey)

        return _actRuExtTask
    }

    val actRuExtTask: ActRuExtTaskPath
        get(): ActRuExtTaskPath = actRuExtTask()

    private lateinit var _actRuJob: ActRuJobPath

    /**
     * Get the implicit to-many join path to the <code>public.act_ru_job</code>
     * table
     */
    fun actRuJob(): ActRuJobPath {
        if (!this::_actRuJob.isInitialized)
            _actRuJob = ActRuJobPath(this, null, ACT_RU_JOB__ACT_FK_JOB_EXCEPTION.inverseKey)

        return _actRuJob
    }

    val actRuJob: ActRuJobPath
        get(): ActRuJobPath = actRuJob()

    private lateinit var _actRuVariable: ActRuVariablePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_variable</code> table
     */
    fun actRuVariable(): ActRuVariablePath {
        if (!this::_actRuVariable.isInitialized)
            _actRuVariable = ActRuVariablePath(this, null, ACT_RU_VARIABLE__ACT_FK_VAR_BYTEARRAY.inverseKey)

        return _actRuVariable
    }

    val actRuVariable: ActRuVariablePath
        get(): ActRuVariablePath = actRuVariable()

    override fun `as`(alias: String): ActGeBytearray = ActGeBytearray(DSL.name(alias), this)
    override fun `as`(alias: Name): ActGeBytearray = ActGeBytearray(alias, this)
    override fun `as`(alias: Table<*>): ActGeBytearray = ActGeBytearray(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActGeBytearray = ActGeBytearray(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActGeBytearray = ActGeBytearray(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActGeBytearray = ActGeBytearray(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActGeBytearray =
        ActGeBytearray(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActGeBytearray = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActGeBytearray = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActGeBytearray = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActGeBytearray = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActGeBytearray = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActGeBytearray =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActGeBytearray =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActGeBytearray = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActGeBytearray = where(DSL.notExists(select))
}
