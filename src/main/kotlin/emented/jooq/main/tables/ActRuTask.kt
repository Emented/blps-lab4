/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_TASK_ASSIGNEE
import emented.jooq.main.indexes.ACT_IDX_TASK_CASE_DEF_ID
import emented.jooq.main.indexes.ACT_IDX_TASK_CASE_EXEC
import emented.jooq.main.indexes.ACT_IDX_TASK_CREATE
import emented.jooq.main.indexes.ACT_IDX_TASK_EXEC
import emented.jooq.main.indexes.ACT_IDX_TASK_LAST_UPDATED
import emented.jooq.main.indexes.ACT_IDX_TASK_OWNER
import emented.jooq.main.indexes.ACT_IDX_TASK_PROCDEF
import emented.jooq.main.indexes.ACT_IDX_TASK_PROCINST
import emented.jooq.main.indexes.ACT_IDX_TASK_TENANT_ID
import emented.jooq.main.keys.ACT_RU_IDENTITYLINK__ACT_FK_TSKASS_TASK
import emented.jooq.main.keys.ACT_RU_TASK_PKEY
import emented.jooq.main.keys.ACT_RU_TASK__ACT_FK_TASK_CASE_DEF
import emented.jooq.main.keys.ACT_RU_TASK__ACT_FK_TASK_CASE_EXE
import emented.jooq.main.keys.ACT_RU_TASK__ACT_FK_TASK_EXE
import emented.jooq.main.keys.ACT_RU_TASK__ACT_FK_TASK_PROCDEF
import emented.jooq.main.keys.ACT_RU_TASK__ACT_FK_TASK_PROCINST
import emented.jooq.main.tables.ActReCaseDef.ActReCaseDefPath
import emented.jooq.main.tables.ActReProcdef.ActReProcdefPath
import emented.jooq.main.tables.ActRuCaseExecution.ActRuCaseExecutionPath
import emented.jooq.main.tables.ActRuExecution.ActRuExecutionPath
import emented.jooq.main.tables.ActRuIdentitylink.ActRuIdentitylinkPath
import emented.jooq.main.tables.records.ActRuTaskRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActRuTask(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActRuTaskRecord>?,
    parentPath: InverseForeignKey<out Record, ActRuTaskRecord>?,
    aliased: Table<ActRuTaskRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActRuTaskRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ru_task</code>
         */
        val ACT_RU_TASK: ActRuTask = ActRuTask()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActRuTaskRecord> = ActRuTaskRecord::class.java

    /**
     * The column <code>public.act_ru_task.id_</code>.
     */
    val ID_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_task.rev_</code>.
     */
    val REV_: TableField<ActRuTaskRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_task.execution_id_</code>.
     */
    val EXECUTION_ID_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_task.proc_inst_id_</code>.
     */
    val PROC_INST_ID_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_task.proc_def_id_</code>.
     */
    val PROC_DEF_ID_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_task.case_execution_id_</code>.
     */
    val CASE_EXECUTION_ID_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("case_execution_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_task.case_inst_id_</code>.
     */
    val CASE_INST_ID_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_task.case_def_id_</code>.
     */
    val CASE_DEF_ID_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("case_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_task.name_</code>.
     */
    val NAME_: TableField<ActRuTaskRecord, String?> = createField(DSL.name("name_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_task.parent_task_id_</code>.
     */
    val PARENT_TASK_ID_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("parent_task_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_task.description_</code>.
     */
    val DESCRIPTION_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("description_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_ru_task.task_def_key_</code>.
     */
    val TASK_DEF_KEY_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("task_def_key_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_task.owner_</code>.
     */
    val OWNER_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("owner_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_task.assignee_</code>.
     */
    val ASSIGNEE_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("assignee_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_task.delegation_</code>.
     */
    val DELEGATION_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("delegation_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_task.priority_</code>.
     */
    val PRIORITY_: TableField<ActRuTaskRecord, Int?> = createField(DSL.name("priority_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_task.create_time_</code>.
     */
    val CREATE_TIME_: TableField<ActRuTaskRecord, LocalDateTime?> =
        createField(DSL.name("create_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_ru_task.last_updated_</code>.
     */
    val LAST_UPDATED_: TableField<ActRuTaskRecord, LocalDateTime?> =
        createField(DSL.name("last_updated_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_ru_task.due_date_</code>.
     */
    val DUE_DATE_: TableField<ActRuTaskRecord, LocalDateTime?> =
        createField(DSL.name("due_date_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_ru_task.follow_up_date_</code>.
     */
    val FOLLOW_UP_DATE_: TableField<ActRuTaskRecord, LocalDateTime?> =
        createField(DSL.name("follow_up_date_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_ru_task.suspension_state_</code>.
     */
    val SUSPENSION_STATE_: TableField<ActRuTaskRecord, Int?> =
        createField(DSL.name("suspension_state_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_task.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActRuTaskRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActRuTaskRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuTaskRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuTaskRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ru_task</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ru_task</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ru_task</code> table reference
     */
    constructor() : this(DSL.name("act_ru_task"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActRuTaskRecord>?,
        parentPath: InverseForeignKey<out Record, ActRuTaskRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_RU_TASK,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActRuTaskPath : ActRuTask, Path<ActRuTaskRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActRuTaskRecord>?,
            parentPath: InverseForeignKey<out Record, ActRuTaskRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActRuTaskRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActRuTaskPath = ActRuTaskPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActRuTaskPath = ActRuTaskPath(alias, this)
        override fun `as`(alias: Table<*>): ActRuTaskPath = ActRuTaskPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(
        ACT_IDX_TASK_ASSIGNEE,
        ACT_IDX_TASK_CASE_DEF_ID,
        ACT_IDX_TASK_CASE_EXEC,
        ACT_IDX_TASK_CREATE,
        ACT_IDX_TASK_EXEC,
        ACT_IDX_TASK_LAST_UPDATED,
        ACT_IDX_TASK_OWNER,
        ACT_IDX_TASK_PROCDEF,
        ACT_IDX_TASK_PROCINST,
        ACT_IDX_TASK_TENANT_ID
    )

    override fun getPrimaryKey(): UniqueKey<ActRuTaskRecord> = ACT_RU_TASK_PKEY
    override fun getReferences(): List<ForeignKey<ActRuTaskRecord, *>> = listOf(
        ACT_RU_TASK__ACT_FK_TASK_EXE,
        ACT_RU_TASK__ACT_FK_TASK_PROCINST,
        ACT_RU_TASK__ACT_FK_TASK_PROCDEF,
        ACT_RU_TASK__ACT_FK_TASK_CASE_EXE,
        ACT_RU_TASK__ACT_FK_TASK_CASE_DEF
    )

    private lateinit var _actFkTaskExe: ActRuExecutionPath

    /**
     * Get the implicit join path to the <code>public.act_ru_execution</code>
     * table, via the <code>act_fk_task_exe</code> key.
     */
    fun actFkTaskExe(): ActRuExecutionPath {
        if (!this::_actFkTaskExe.isInitialized)
            _actFkTaskExe = ActRuExecutionPath(this, ACT_RU_TASK__ACT_FK_TASK_EXE, null)

        return _actFkTaskExe
    }

    val actFkTaskExe: ActRuExecutionPath
        get(): ActRuExecutionPath = actFkTaskExe()

    private lateinit var _actFkTaskProcinst: ActRuExecutionPath

    /**
     * Get the implicit join path to the <code>public.act_ru_execution</code>
     * table, via the <code>act_fk_task_procinst</code> key.
     */
    fun actFkTaskProcinst(): ActRuExecutionPath {
        if (!this::_actFkTaskProcinst.isInitialized)
            _actFkTaskProcinst = ActRuExecutionPath(this, ACT_RU_TASK__ACT_FK_TASK_PROCINST, null)

        return _actFkTaskProcinst
    }

    val actFkTaskProcinst: ActRuExecutionPath
        get(): ActRuExecutionPath = actFkTaskProcinst()

    private lateinit var _actReProcdef: ActReProcdefPath

    /**
     * Get the implicit join path to the <code>public.act_re_procdef</code>
     * table.
     */
    fun actReProcdef(): ActReProcdefPath {
        if (!this::_actReProcdef.isInitialized)
            _actReProcdef = ActReProcdefPath(this, ACT_RU_TASK__ACT_FK_TASK_PROCDEF, null)

        return _actReProcdef
    }

    val actReProcdef: ActReProcdefPath
        get(): ActReProcdefPath = actReProcdef()

    private lateinit var _actRuCaseExecution: ActRuCaseExecutionPath

    /**
     * Get the implicit join path to the
     * <code>public.act_ru_case_execution</code> table.
     */
    fun actRuCaseExecution(): ActRuCaseExecutionPath {
        if (!this::_actRuCaseExecution.isInitialized)
            _actRuCaseExecution = ActRuCaseExecutionPath(this, ACT_RU_TASK__ACT_FK_TASK_CASE_EXE, null)

        return _actRuCaseExecution
    }

    val actRuCaseExecution: ActRuCaseExecutionPath
        get(): ActRuCaseExecutionPath = actRuCaseExecution()

    private lateinit var _actReCaseDef: ActReCaseDefPath

    /**
     * Get the implicit join path to the <code>public.act_re_case_def</code>
     * table.
     */
    fun actReCaseDef(): ActReCaseDefPath {
        if (!this::_actReCaseDef.isInitialized)
            _actReCaseDef = ActReCaseDefPath(this, ACT_RU_TASK__ACT_FK_TASK_CASE_DEF, null)

        return _actReCaseDef
    }

    val actReCaseDef: ActReCaseDefPath
        get(): ActReCaseDefPath = actReCaseDef()

    private lateinit var _actRuIdentitylink: ActRuIdentitylinkPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_identitylink</code> table
     */
    fun actRuIdentitylink(): ActRuIdentitylinkPath {
        if (!this::_actRuIdentitylink.isInitialized)
            _actRuIdentitylink = ActRuIdentitylinkPath(this, null, ACT_RU_IDENTITYLINK__ACT_FK_TSKASS_TASK.inverseKey)

        return _actRuIdentitylink
    }

    val actRuIdentitylink: ActRuIdentitylinkPath
        get(): ActRuIdentitylinkPath = actRuIdentitylink()

    override fun `as`(alias: String): ActRuTask = ActRuTask(DSL.name(alias), this)
    override fun `as`(alias: Name): ActRuTask = ActRuTask(alias, this)
    override fun `as`(alias: Table<*>): ActRuTask = ActRuTask(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActRuTask = ActRuTask(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActRuTask = ActRuTask(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActRuTask = ActRuTask(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActRuTask =
        ActRuTask(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActRuTask = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActRuTask = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActRuTask = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActRuTask = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActRuTask = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActRuTask =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActRuTask =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActRuTask = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActRuTask = where(DSL.notExists(select))
}
