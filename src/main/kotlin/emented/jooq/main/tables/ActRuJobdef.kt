/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_JOBDEF_PROC_DEF_ID
import emented.jooq.main.indexes.ACT_IDX_JOBDEF_TENANT_ID
import emented.jooq.main.keys.ACT_RU_BATCH__ACT_FK_BATCH_JOB_DEF
import emented.jooq.main.keys.ACT_RU_BATCH__ACT_FK_BATCH_MONITOR_JOB_DEF
import emented.jooq.main.keys.ACT_RU_BATCH__ACT_FK_BATCH_SEED_JOB_DEF
import emented.jooq.main.keys.ACT_RU_INCIDENT__ACT_FK_INC_JOB_DEF
import emented.jooq.main.keys.ACT_RU_JOBDEF_PKEY
import emented.jooq.main.tables.ActRuBatch.ActRuBatchPath
import emented.jooq.main.tables.ActRuIncident.ActRuIncidentPath
import emented.jooq.main.tables.records.ActRuJobdefRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActRuJobdef(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActRuJobdefRecord>?,
    parentPath: InverseForeignKey<out Record, ActRuJobdefRecord>?,
    aliased: Table<ActRuJobdefRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActRuJobdefRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ru_jobdef</code>
         */
        val ACT_RU_JOBDEF: ActRuJobdef = ActRuJobdef()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActRuJobdefRecord> = ActRuJobdefRecord::class.java

    /**
     * The column <code>public.act_ru_jobdef.id_</code>.
     */
    val ID_: TableField<ActRuJobdefRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_jobdef.rev_</code>.
     */
    val REV_: TableField<ActRuJobdefRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_jobdef.proc_def_id_</code>.
     */
    val PROC_DEF_ID_: TableField<ActRuJobdefRecord, String?> =
        createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_jobdef.proc_def_key_</code>.
     */
    val PROC_DEF_KEY_: TableField<ActRuJobdefRecord, String?> =
        createField(DSL.name("proc_def_key_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_jobdef.act_id_</code>.
     */
    val ACT_ID_: TableField<ActRuJobdefRecord, String?> =
        createField(DSL.name("act_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_jobdef.job_type_</code>.
     */
    val JOB_TYPE_: TableField<ActRuJobdefRecord, String?> =
        createField(DSL.name("job_type_"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_jobdef.job_configuration_</code>.
     */
    val JOB_CONFIGURATION_: TableField<ActRuJobdefRecord, String?> =
        createField(DSL.name("job_configuration_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_jobdef.suspension_state_</code>.
     */
    val SUSPENSION_STATE_: TableField<ActRuJobdefRecord, Int?> =
        createField(DSL.name("suspension_state_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_jobdef.job_priority_</code>.
     */
    val JOB_PRIORITY_: TableField<ActRuJobdefRecord, Long?> =
        createField(DSL.name("job_priority_"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.act_ru_jobdef.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActRuJobdefRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_jobdef.deployment_id_</code>.
     */
    val DEPLOYMENT_ID_: TableField<ActRuJobdefRecord, String?> =
        createField(DSL.name("deployment_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActRuJobdefRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuJobdefRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuJobdefRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ru_jobdef</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ru_jobdef</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ru_jobdef</code> table reference
     */
    constructor() : this(DSL.name("act_ru_jobdef"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActRuJobdefRecord>?,
        parentPath: InverseForeignKey<out Record, ActRuJobdefRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_RU_JOBDEF,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActRuJobdefPath : ActRuJobdef, Path<ActRuJobdefRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActRuJobdefRecord>?,
            parentPath: InverseForeignKey<out Record, ActRuJobdefRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActRuJobdefRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActRuJobdefPath = ActRuJobdefPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActRuJobdefPath = ActRuJobdefPath(alias, this)
        override fun `as`(alias: Table<*>): ActRuJobdefPath = ActRuJobdefPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(ACT_IDX_JOBDEF_PROC_DEF_ID, ACT_IDX_JOBDEF_TENANT_ID)
    override fun getPrimaryKey(): UniqueKey<ActRuJobdefRecord> = ACT_RU_JOBDEF_PKEY

    private lateinit var _actFkBatchJobDef: ActRuBatchPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_batch</code> table, via the
     * <code>act_fk_batch_job_def</code> key
     */
    fun actFkBatchJobDef(): ActRuBatchPath {
        if (!this::_actFkBatchJobDef.isInitialized)
            _actFkBatchJobDef = ActRuBatchPath(this, null, ACT_RU_BATCH__ACT_FK_BATCH_JOB_DEF.inverseKey)

        return _actFkBatchJobDef
    }

    val actFkBatchJobDef: ActRuBatchPath
        get(): ActRuBatchPath = actFkBatchJobDef()

    private lateinit var _actFkBatchMonitorJobDef: ActRuBatchPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_batch</code> table, via the
     * <code>act_fk_batch_monitor_job_def</code> key
     */
    fun actFkBatchMonitorJobDef(): ActRuBatchPath {
        if (!this::_actFkBatchMonitorJobDef.isInitialized)
            _actFkBatchMonitorJobDef = ActRuBatchPath(this, null, ACT_RU_BATCH__ACT_FK_BATCH_MONITOR_JOB_DEF.inverseKey)

        return _actFkBatchMonitorJobDef
    }

    val actFkBatchMonitorJobDef: ActRuBatchPath
        get(): ActRuBatchPath = actFkBatchMonitorJobDef()

    private lateinit var _actFkBatchSeedJobDef: ActRuBatchPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_batch</code> table, via the
     * <code>act_fk_batch_seed_job_def</code> key
     */
    fun actFkBatchSeedJobDef(): ActRuBatchPath {
        if (!this::_actFkBatchSeedJobDef.isInitialized)
            _actFkBatchSeedJobDef = ActRuBatchPath(this, null, ACT_RU_BATCH__ACT_FK_BATCH_SEED_JOB_DEF.inverseKey)

        return _actFkBatchSeedJobDef
    }

    val actFkBatchSeedJobDef: ActRuBatchPath
        get(): ActRuBatchPath = actFkBatchSeedJobDef()

    private lateinit var _actRuIncident: ActRuIncidentPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_incident</code> table
     */
    fun actRuIncident(): ActRuIncidentPath {
        if (!this::_actRuIncident.isInitialized)
            _actRuIncident = ActRuIncidentPath(this, null, ACT_RU_INCIDENT__ACT_FK_INC_JOB_DEF.inverseKey)

        return _actRuIncident
    }

    val actRuIncident: ActRuIncidentPath
        get(): ActRuIncidentPath = actRuIncident()

    override fun `as`(alias: String): ActRuJobdef = ActRuJobdef(DSL.name(alias), this)
    override fun `as`(alias: Name): ActRuJobdef = ActRuJobdef(alias, this)
    override fun `as`(alias: Table<*>): ActRuJobdef = ActRuJobdef(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActRuJobdef = ActRuJobdef(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActRuJobdef = ActRuJobdef(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActRuJobdef = ActRuJobdef(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActRuJobdef =
        ActRuJobdef(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActRuJobdef = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActRuJobdef = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActRuJobdef = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActRuJobdef = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActRuJobdef = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActRuJobdef =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActRuJobdef =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActRuJobdef = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActRuJobdef = where(DSL.notExists(select))
}
