/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_HI_CAS_I_BUSKEY
import emented.jooq.main.indexes.ACT_IDX_HI_CAS_I_CLOSE
import emented.jooq.main.indexes.ACT_IDX_HI_CAS_I_TENANT_ID
import emented.jooq.main.keys.ACT_HI_CASEINST_CASE_INST_ID__KEY
import emented.jooq.main.keys.ACT_HI_CASEINST_PKEY
import emented.jooq.main.tables.records.ActHiCaseinstRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActHiCaseinst(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActHiCaseinstRecord>?,
    parentPath: InverseForeignKey<out Record, ActHiCaseinstRecord>?,
    aliased: Table<ActHiCaseinstRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActHiCaseinstRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_hi_caseinst</code>
         */
        val ACT_HI_CASEINST: ActHiCaseinst = ActHiCaseinst()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActHiCaseinstRecord> = ActHiCaseinstRecord::class.java

    /**
     * The column <code>public.act_hi_caseinst.id_</code>.
     */
    val ID_: TableField<ActHiCaseinstRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_caseinst.case_inst_id_</code>.
     */
    val CASE_INST_ID_: TableField<ActHiCaseinstRecord, String?> =
        createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_caseinst.business_key_</code>.
     */
    val BUSINESS_KEY_: TableField<ActHiCaseinstRecord, String?> =
        createField(DSL.name("business_key_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_caseinst.case_def_id_</code>.
     */
    val CASE_DEF_ID_: TableField<ActHiCaseinstRecord, String?> =
        createField(DSL.name("case_def_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_caseinst.create_time_</code>.
     */
    val CREATE_TIME_: TableField<ActHiCaseinstRecord, LocalDateTime?> =
        createField(DSL.name("create_time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_caseinst.close_time_</code>.
     */
    val CLOSE_TIME_: TableField<ActHiCaseinstRecord, LocalDateTime?> =
        createField(DSL.name("close_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_hi_caseinst.duration_</code>.
     */
    val DURATION_: TableField<ActHiCaseinstRecord, Long?> =
        createField(DSL.name("duration_"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.act_hi_caseinst.state_</code>.
     */
    val STATE_: TableField<ActHiCaseinstRecord, Int?> = createField(DSL.name("state_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_hi_caseinst.create_user_id_</code>.
     */
    val CREATE_USER_ID_: TableField<ActHiCaseinstRecord, String?> =
        createField(DSL.name("create_user_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_caseinst.super_case_instance_id_</code>.
     */
    val SUPER_CASE_INSTANCE_ID_: TableField<ActHiCaseinstRecord, String?> =
        createField(DSL.name("super_case_instance_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>public.act_hi_caseinst.super_process_instance_id_</code>.
     */
    val SUPER_PROCESS_INSTANCE_ID_: TableField<ActHiCaseinstRecord, String?> =
        createField(DSL.name("super_process_instance_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_caseinst.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActHiCaseinstRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActHiCaseinstRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActHiCaseinstRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActHiCaseinstRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_hi_caseinst</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_hi_caseinst</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_hi_caseinst</code> table reference
     */
    constructor() : this(DSL.name("act_hi_caseinst"), null)

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> =
        listOf(ACT_IDX_HI_CAS_I_BUSKEY, ACT_IDX_HI_CAS_I_CLOSE, ACT_IDX_HI_CAS_I_TENANT_ID)

    override fun getPrimaryKey(): UniqueKey<ActHiCaseinstRecord> = ACT_HI_CASEINST_PKEY
    override fun getUniqueKeys(): List<UniqueKey<ActHiCaseinstRecord>> = listOf(ACT_HI_CASEINST_CASE_INST_ID__KEY)
    override fun `as`(alias: String): ActHiCaseinst = ActHiCaseinst(DSL.name(alias), this)
    override fun `as`(alias: Name): ActHiCaseinst = ActHiCaseinst(alias, this)
    override fun `as`(alias: Table<*>): ActHiCaseinst = ActHiCaseinst(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActHiCaseinst = ActHiCaseinst(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActHiCaseinst = ActHiCaseinst(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActHiCaseinst = ActHiCaseinst(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActHiCaseinst =
        ActHiCaseinst(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActHiCaseinst = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActHiCaseinst = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActHiCaseinst = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActHiCaseinst = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActHiCaseinst = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActHiCaseinst =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActHiCaseinst =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActHiCaseinst = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActHiCaseinst = where(DSL.notExists(select))
}
