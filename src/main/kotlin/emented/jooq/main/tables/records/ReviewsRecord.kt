/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables.records

import emented.jooq.main.tables.Reviews
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReviewsRecord() : UpdatableRecordImpl<ReviewsRecord>(Reviews.REVIEWS) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var authorUserId: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var date: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    open var score: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var status: Short?
        set(value): Unit = set(4, value)
        get(): Short? = get(4) as Short?

    open var text: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var filmId: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised ReviewsRecord
     */
    constructor(
        id: Int? = null,
        authorUserId: String? = null,
        date: LocalDateTime? = null,
        score: Int? = null,
        status: Short? = null,
        text: String? = null,
        filmId: Int? = null
    ) : this() {
        this.id = id
        this.authorUserId = authorUserId
        this.date = date
        this.score = score
        this.status = status
        this.text = text
        this.filmId = filmId
        resetChangedOnNotNull()
    }
}
