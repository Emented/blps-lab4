/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_EXEC_BUSKEY
import emented.jooq.main.indexes.ACT_IDX_EXEC_TENANT_ID
import emented.jooq.main.indexes.ACT_IDX_EXE_PARENT
import emented.jooq.main.indexes.ACT_IDX_EXE_PROCDEF
import emented.jooq.main.indexes.ACT_IDX_EXE_PROCINST
import emented.jooq.main.indexes.ACT_IDX_EXE_ROOT_PI
import emented.jooq.main.indexes.ACT_IDX_EXE_SUPER
import emented.jooq.main.keys.ACT_RU_EVENT_SUBSCR__ACT_FK_EVENT_EXEC
import emented.jooq.main.keys.ACT_RU_EXECUTION_PKEY
import emented.jooq.main.keys.ACT_RU_EXECUTION__ACT_FK_EXE_PARENT
import emented.jooq.main.keys.ACT_RU_EXECUTION__ACT_FK_EXE_PROCDEF
import emented.jooq.main.keys.ACT_RU_EXECUTION__ACT_FK_EXE_PROCINST
import emented.jooq.main.keys.ACT_RU_EXECUTION__ACT_FK_EXE_SUPER
import emented.jooq.main.keys.ACT_RU_EXT_TASK__ACT_FK_EXT_TASK_EXE
import emented.jooq.main.keys.ACT_RU_INCIDENT__ACT_FK_INC_EXE
import emented.jooq.main.keys.ACT_RU_INCIDENT__ACT_FK_INC_PROCINST
import emented.jooq.main.keys.ACT_RU_TASK__ACT_FK_TASK_EXE
import emented.jooq.main.keys.ACT_RU_TASK__ACT_FK_TASK_PROCINST
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_EXE
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_PROCINST
import emented.jooq.main.tables.ActReProcdef.ActReProcdefPath
import emented.jooq.main.tables.ActRuEventSubscr.ActRuEventSubscrPath
import emented.jooq.main.tables.ActRuExtTask.ActRuExtTaskPath
import emented.jooq.main.tables.ActRuIncident.ActRuIncidentPath
import emented.jooq.main.tables.ActRuTask.ActRuTaskPath
import emented.jooq.main.tables.ActRuVariable.ActRuVariablePath
import emented.jooq.main.tables.records.ActRuExecutionRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActRuExecution(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActRuExecutionRecord>?,
    parentPath: InverseForeignKey<out Record, ActRuExecutionRecord>?,
    aliased: Table<ActRuExecutionRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActRuExecutionRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ru_execution</code>
         */
        val ACT_RU_EXECUTION: ActRuExecution = ActRuExecution()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActRuExecutionRecord> = ActRuExecutionRecord::class.java

    /**
     * The column <code>public.act_ru_execution.id_</code>.
     */
    val ID_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_execution.rev_</code>.
     */
    val REV_: TableField<ActRuExecutionRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_execution.root_proc_inst_id_</code>.
     */
    val ROOT_PROC_INST_ID_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_execution.proc_inst_id_</code>.
     */
    val PROC_INST_ID_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_execution.business_key_</code>.
     */
    val BUSINESS_KEY_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("business_key_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_execution.parent_id_</code>.
     */
    val PARENT_ID_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("parent_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_execution.proc_def_id_</code>.
     */
    val PROC_DEF_ID_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_execution.super_exec_</code>.
     */
    val SUPER_EXEC_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("super_exec_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_execution.super_case_exec_</code>.
     */
    val SUPER_CASE_EXEC_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("super_case_exec_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_execution.case_inst_id_</code>.
     */
    val CASE_INST_ID_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_execution.act_id_</code>.
     */
    val ACT_ID_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("act_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_execution.act_inst_id_</code>.
     */
    val ACT_INST_ID_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("act_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_execution.is_active_</code>.
     */
    val IS_ACTIVE_: TableField<ActRuExecutionRecord, Boolean?> =
        createField(DSL.name("is_active_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_ru_execution.is_concurrent_</code>.
     */
    val IS_CONCURRENT_: TableField<ActRuExecutionRecord, Boolean?> =
        createField(DSL.name("is_concurrent_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_ru_execution.is_scope_</code>.
     */
    val IS_SCOPE_: TableField<ActRuExecutionRecord, Boolean?> =
        createField(DSL.name("is_scope_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_ru_execution.is_event_scope_</code>.
     */
    val IS_EVENT_SCOPE_: TableField<ActRuExecutionRecord, Boolean?> =
        createField(DSL.name("is_event_scope_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_ru_execution.suspension_state_</code>.
     */
    val SUSPENSION_STATE_: TableField<ActRuExecutionRecord, Int?> =
        createField(DSL.name("suspension_state_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_execution.cached_ent_state_</code>.
     */
    val CACHED_ENT_STATE_: TableField<ActRuExecutionRecord, Int?> =
        createField(DSL.name("cached_ent_state_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_execution.sequence_counter_</code>.
     */
    val SEQUENCE_COUNTER_: TableField<ActRuExecutionRecord, Long?> =
        createField(DSL.name("sequence_counter_"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.act_ru_execution.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActRuExecutionRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActRuExecutionRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuExecutionRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuExecutionRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ru_execution</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ru_execution</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ru_execution</code> table reference
     */
    constructor() : this(DSL.name("act_ru_execution"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActRuExecutionRecord>?,
        parentPath: InverseForeignKey<out Record, ActRuExecutionRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_RU_EXECUTION,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActRuExecutionPath : ActRuExecution, Path<ActRuExecutionRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActRuExecutionRecord>?,
            parentPath: InverseForeignKey<out Record, ActRuExecutionRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActRuExecutionRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActRuExecutionPath = ActRuExecutionPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActRuExecutionPath = ActRuExecutionPath(alias, this)
        override fun `as`(alias: Table<*>): ActRuExecutionPath = ActRuExecutionPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(
        ACT_IDX_EXE_PARENT,
        ACT_IDX_EXE_PROCDEF,
        ACT_IDX_EXE_PROCINST,
        ACT_IDX_EXE_ROOT_PI,
        ACT_IDX_EXE_SUPER,
        ACT_IDX_EXEC_BUSKEY,
        ACT_IDX_EXEC_TENANT_ID
    )

    override fun getPrimaryKey(): UniqueKey<ActRuExecutionRecord> = ACT_RU_EXECUTION_PKEY
    override fun getReferences(): List<ForeignKey<ActRuExecutionRecord, *>> = listOf(
        ACT_RU_EXECUTION__ACT_FK_EXE_PROCINST,
        ACT_RU_EXECUTION__ACT_FK_EXE_PARENT,
        ACT_RU_EXECUTION__ACT_FK_EXE_PROCDEF,
        ACT_RU_EXECUTION__ACT_FK_EXE_SUPER
    )

    private lateinit var _actFkExeProcinst: ActRuExecutionPath

    /**
     * Get the implicit join path to the <code>public.act_ru_execution</code>
     * table, via the <code>act_fk_exe_procinst</code> key.
     */
    fun actFkExeProcinst(): ActRuExecutionPath {
        if (!this::_actFkExeProcinst.isInitialized)
            _actFkExeProcinst = ActRuExecutionPath(this, ACT_RU_EXECUTION__ACT_FK_EXE_PROCINST, null)

        return _actFkExeProcinst
    }

    val actFkExeProcinst: ActRuExecutionPath
        get(): ActRuExecutionPath = actFkExeProcinst()

    private lateinit var _actFkExeParent: ActRuExecutionPath

    /**
     * Get the implicit join path to the <code>public.act_ru_execution</code>
     * table, via the <code>act_fk_exe_parent</code> key.
     */
    fun actFkExeParent(): ActRuExecutionPath {
        if (!this::_actFkExeParent.isInitialized)
            _actFkExeParent = ActRuExecutionPath(this, ACT_RU_EXECUTION__ACT_FK_EXE_PARENT, null)

        return _actFkExeParent
    }

    val actFkExeParent: ActRuExecutionPath
        get(): ActRuExecutionPath = actFkExeParent()

    private lateinit var _actReProcdef: ActReProcdefPath

    /**
     * Get the implicit join path to the <code>public.act_re_procdef</code>
     * table.
     */
    fun actReProcdef(): ActReProcdefPath {
        if (!this::_actReProcdef.isInitialized)
            _actReProcdef = ActReProcdefPath(this, ACT_RU_EXECUTION__ACT_FK_EXE_PROCDEF, null)

        return _actReProcdef
    }

    val actReProcdef: ActReProcdefPath
        get(): ActReProcdefPath = actReProcdef()

    private lateinit var _actFkExeSuper: ActRuExecutionPath

    /**
     * Get the implicit join path to the <code>public.act_ru_execution</code>
     * table, via the <code>act_fk_exe_super</code> key.
     */
    fun actFkExeSuper(): ActRuExecutionPath {
        if (!this::_actFkExeSuper.isInitialized)
            _actFkExeSuper = ActRuExecutionPath(this, ACT_RU_EXECUTION__ACT_FK_EXE_SUPER, null)

        return _actFkExeSuper
    }

    val actFkExeSuper: ActRuExecutionPath
        get(): ActRuExecutionPath = actFkExeSuper()

    private lateinit var _actRuEventSubscr: ActRuEventSubscrPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_event_subscr</code> table
     */
    fun actRuEventSubscr(): ActRuEventSubscrPath {
        if (!this::_actRuEventSubscr.isInitialized)
            _actRuEventSubscr = ActRuEventSubscrPath(this, null, ACT_RU_EVENT_SUBSCR__ACT_FK_EVENT_EXEC.inverseKey)

        return _actRuEventSubscr
    }

    val actRuEventSubscr: ActRuEventSubscrPath
        get(): ActRuEventSubscrPath = actRuEventSubscr()

    private lateinit var _actRuExtTask: ActRuExtTaskPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_ext_task</code> table
     */
    fun actRuExtTask(): ActRuExtTaskPath {
        if (!this::_actRuExtTask.isInitialized)
            _actRuExtTask = ActRuExtTaskPath(this, null, ACT_RU_EXT_TASK__ACT_FK_EXT_TASK_EXE.inverseKey)

        return _actRuExtTask
    }

    val actRuExtTask: ActRuExtTaskPath
        get(): ActRuExtTaskPath = actRuExtTask()

    private lateinit var _actFkIncExe: ActRuIncidentPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_incident</code> table, via the
     * <code>act_fk_inc_exe</code> key
     */
    fun actFkIncExe(): ActRuIncidentPath {
        if (!this::_actFkIncExe.isInitialized)
            _actFkIncExe = ActRuIncidentPath(this, null, ACT_RU_INCIDENT__ACT_FK_INC_EXE.inverseKey)

        return _actFkIncExe
    }

    val actFkIncExe: ActRuIncidentPath
        get(): ActRuIncidentPath = actFkIncExe()

    private lateinit var _actFkIncProcinst: ActRuIncidentPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_incident</code> table, via the
     * <code>act_fk_inc_procinst</code> key
     */
    fun actFkIncProcinst(): ActRuIncidentPath {
        if (!this::_actFkIncProcinst.isInitialized)
            _actFkIncProcinst = ActRuIncidentPath(this, null, ACT_RU_INCIDENT__ACT_FK_INC_PROCINST.inverseKey)

        return _actFkIncProcinst
    }

    val actFkIncProcinst: ActRuIncidentPath
        get(): ActRuIncidentPath = actFkIncProcinst()

    private lateinit var _actFkTaskExe: ActRuTaskPath

    /**
     * Get the implicit to-many join path to the <code>public.act_ru_task</code>
     * table, via the <code>act_fk_task_exe</code> key
     */
    fun actFkTaskExe(): ActRuTaskPath {
        if (!this::_actFkTaskExe.isInitialized)
            _actFkTaskExe = ActRuTaskPath(this, null, ACT_RU_TASK__ACT_FK_TASK_EXE.inverseKey)

        return _actFkTaskExe
    }

    val actFkTaskExe: ActRuTaskPath
        get(): ActRuTaskPath = actFkTaskExe()

    private lateinit var _actFkTaskProcinst: ActRuTaskPath

    /**
     * Get the implicit to-many join path to the <code>public.act_ru_task</code>
     * table, via the <code>act_fk_task_procinst</code> key
     */
    fun actFkTaskProcinst(): ActRuTaskPath {
        if (!this::_actFkTaskProcinst.isInitialized)
            _actFkTaskProcinst = ActRuTaskPath(this, null, ACT_RU_TASK__ACT_FK_TASK_PROCINST.inverseKey)

        return _actFkTaskProcinst
    }

    val actFkTaskProcinst: ActRuTaskPath
        get(): ActRuTaskPath = actFkTaskProcinst()

    private lateinit var _actFkVarExe: ActRuVariablePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_variable</code> table, via the
     * <code>act_fk_var_exe</code> key
     */
    fun actFkVarExe(): ActRuVariablePath {
        if (!this::_actFkVarExe.isInitialized)
            _actFkVarExe = ActRuVariablePath(this, null, ACT_RU_VARIABLE__ACT_FK_VAR_EXE.inverseKey)

        return _actFkVarExe
    }

    val actFkVarExe: ActRuVariablePath
        get(): ActRuVariablePath = actFkVarExe()

    private lateinit var _actFkVarProcinst: ActRuVariablePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_variable</code> table, via the
     * <code>act_fk_var_procinst</code> key
     */
    fun actFkVarProcinst(): ActRuVariablePath {
        if (!this::_actFkVarProcinst.isInitialized)
            _actFkVarProcinst = ActRuVariablePath(this, null, ACT_RU_VARIABLE__ACT_FK_VAR_PROCINST.inverseKey)

        return _actFkVarProcinst
    }

    val actFkVarProcinst: ActRuVariablePath
        get(): ActRuVariablePath = actFkVarProcinst()

    override fun `as`(alias: String): ActRuExecution = ActRuExecution(DSL.name(alias), this)
    override fun `as`(alias: Name): ActRuExecution = ActRuExecution(alias, this)
    override fun `as`(alias: Table<*>): ActRuExecution = ActRuExecution(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActRuExecution = ActRuExecution(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActRuExecution = ActRuExecution(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActRuExecution = ActRuExecution(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActRuExecution =
        ActRuExecution(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActRuExecution = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActRuExecution = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActRuExecution = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActRuExecution = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActRuExecution = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActRuExecution =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActRuExecution =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActRuExecution = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActRuExecution = where(DSL.notExists(select))
}
