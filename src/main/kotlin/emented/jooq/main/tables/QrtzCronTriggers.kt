/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.keys.QRTZ_CRON_TRIGGERS_PKEY
import emented.jooq.main.keys.QRTZ_CRON_TRIGGERS__QRTZ_CRON_TRIGGERS_SCHED_NAME_TRIGGER_NAME_TRIGGER_GROUP_FKEY
import emented.jooq.main.tables.QrtzTriggers.QrtzTriggersPath
import emented.jooq.main.tables.records.QrtzCronTriggersRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class QrtzCronTriggers(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, QrtzCronTriggersRecord>?,
    parentPath: InverseForeignKey<out Record, QrtzCronTriggersRecord>?,
    aliased: Table<QrtzCronTriggersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<QrtzCronTriggersRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.qrtz_cron_triggers</code>
         */
        val QRTZ_CRON_TRIGGERS: QrtzCronTriggers = QrtzCronTriggers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<QrtzCronTriggersRecord> = QrtzCronTriggersRecord::class.java

    /**
     * The column <code>public.qrtz_cron_triggers.sched_name</code>.
     */
    val SCHED_NAME: TableField<QrtzCronTriggersRecord, String?> =
        createField(DSL.name("sched_name"), SQLDataType.VARCHAR(120).nullable(false), this, "")

    /**
     * The column <code>public.qrtz_cron_triggers.trigger_name</code>.
     */
    val TRIGGER_NAME: TableField<QrtzCronTriggersRecord, String?> =
        createField(DSL.name("trigger_name"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>public.qrtz_cron_triggers.trigger_group</code>.
     */
    val TRIGGER_GROUP: TableField<QrtzCronTriggersRecord, String?> =
        createField(DSL.name("trigger_group"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>public.qrtz_cron_triggers.cron_expression</code>.
     */
    val CRON_EXPRESSION: TableField<QrtzCronTriggersRecord, String?> =
        createField(DSL.name("cron_expression"), SQLDataType.VARCHAR(120).nullable(false), this, "")

    /**
     * The column <code>public.qrtz_cron_triggers.time_zone_id</code>.
     */
    val TIME_ZONE_ID: TableField<QrtzCronTriggersRecord, String?> =
        createField(DSL.name("time_zone_id"), SQLDataType.VARCHAR(80), this, "")

    private constructor(alias: Name, aliased: Table<QrtzCronTriggersRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<QrtzCronTriggersRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<QrtzCronTriggersRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.qrtz_cron_triggers</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.qrtz_cron_triggers</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.qrtz_cron_triggers</code> table reference
     */
    constructor() : this(DSL.name("qrtz_cron_triggers"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, QrtzCronTriggersRecord>?,
        parentPath: InverseForeignKey<out Record, QrtzCronTriggersRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        QRTZ_CRON_TRIGGERS,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class QrtzCronTriggersPath : QrtzCronTriggers, Path<QrtzCronTriggersRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, QrtzCronTriggersRecord>?,
            parentPath: InverseForeignKey<out Record, QrtzCronTriggersRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<QrtzCronTriggersRecord>) : super(alias, aliased)

        override fun `as`(alias: String): QrtzCronTriggersPath = QrtzCronTriggersPath(DSL.name(alias), this)
        override fun `as`(alias: Name): QrtzCronTriggersPath = QrtzCronTriggersPath(alias, this)
        override fun `as`(alias: Table<*>): QrtzCronTriggersPath = QrtzCronTriggersPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<QrtzCronTriggersRecord> = QRTZ_CRON_TRIGGERS_PKEY
    override fun getReferences(): List<ForeignKey<QrtzCronTriggersRecord, *>> =
        listOf(QRTZ_CRON_TRIGGERS__QRTZ_CRON_TRIGGERS_SCHED_NAME_TRIGGER_NAME_TRIGGER_GROUP_FKEY)

    private lateinit var _qrtzTriggers: QrtzTriggersPath

    /**
     * Get the implicit join path to the <code>public.qrtz_triggers</code>
     * table.
     */
    fun qrtzTriggers(): QrtzTriggersPath {
        if (!this::_qrtzTriggers.isInitialized)
            _qrtzTriggers = QrtzTriggersPath(
                this,
                QRTZ_CRON_TRIGGERS__QRTZ_CRON_TRIGGERS_SCHED_NAME_TRIGGER_NAME_TRIGGER_GROUP_FKEY,
                null
            )

        return _qrtzTriggers
    }

    val qrtzTriggers: QrtzTriggersPath
        get(): QrtzTriggersPath = qrtzTriggers()

    override fun `as`(alias: String): QrtzCronTriggers = QrtzCronTriggers(DSL.name(alias), this)
    override fun `as`(alias: Name): QrtzCronTriggers = QrtzCronTriggers(alias, this)
    override fun `as`(alias: Table<*>): QrtzCronTriggers = QrtzCronTriggers(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): QrtzCronTriggers = QrtzCronTriggers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): QrtzCronTriggers = QrtzCronTriggers(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): QrtzCronTriggers = QrtzCronTriggers(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): QrtzCronTriggers =
        QrtzCronTriggers(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): QrtzCronTriggers = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): QrtzCronTriggers = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): QrtzCronTriggers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): QrtzCronTriggers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): QrtzCronTriggers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): QrtzCronTriggers =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): QrtzCronTriggers =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): QrtzCronTriggers = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): QrtzCronTriggers = where(DSL.notExists(select))
}
