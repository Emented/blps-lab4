/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_MEMB_GROUP
import emented.jooq.main.indexes.ACT_IDX_MEMB_USER
import emented.jooq.main.keys.ACT_ID_MEMBERSHIP_PKEY
import emented.jooq.main.keys.ACT_ID_MEMBERSHIP__ACT_FK_MEMB_GROUP
import emented.jooq.main.keys.ACT_ID_MEMBERSHIP__ACT_FK_MEMB_USER
import emented.jooq.main.tables.ActIdGroup.ActIdGroupPath
import emented.jooq.main.tables.ActIdUser.ActIdUserPath
import emented.jooq.main.tables.records.ActIdMembershipRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActIdMembership(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActIdMembershipRecord>?,
    parentPath: InverseForeignKey<out Record, ActIdMembershipRecord>?,
    aliased: Table<ActIdMembershipRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActIdMembershipRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_id_membership</code>
         */
        val ACT_ID_MEMBERSHIP: ActIdMembership = ActIdMembership()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActIdMembershipRecord> = ActIdMembershipRecord::class.java

    /**
     * The column <code>public.act_id_membership.user_id_</code>.
     */
    val USER_ID_: TableField<ActIdMembershipRecord, String?> =
        createField(DSL.name("user_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_id_membership.group_id_</code>.
     */
    val GROUP_ID_: TableField<ActIdMembershipRecord, String?> =
        createField(DSL.name("group_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ActIdMembershipRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(
        alias: Name,
        aliased: Table<ActIdMembershipRecord>?,
        parameters: Array<Field<*>?>?
    ) : this(alias, null, null, null, aliased, parameters, null)

    private constructor(alias: Name, aliased: Table<ActIdMembershipRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_id_membership</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_id_membership</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_id_membership</code> table reference
     */
    constructor() : this(DSL.name("act_id_membership"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActIdMembershipRecord>?,
        parentPath: InverseForeignKey<out Record, ActIdMembershipRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_ID_MEMBERSHIP,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActIdMembershipPath : ActIdMembership, Path<ActIdMembershipRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActIdMembershipRecord>?,
            parentPath: InverseForeignKey<out Record, ActIdMembershipRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActIdMembershipRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActIdMembershipPath = ActIdMembershipPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActIdMembershipPath = ActIdMembershipPath(alias, this)
        override fun `as`(alias: Table<*>): ActIdMembershipPath = ActIdMembershipPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(ACT_IDX_MEMB_GROUP, ACT_IDX_MEMB_USER)
    override fun getPrimaryKey(): UniqueKey<ActIdMembershipRecord> = ACT_ID_MEMBERSHIP_PKEY
    override fun getReferences(): List<ForeignKey<ActIdMembershipRecord, *>> =
        listOf(ACT_ID_MEMBERSHIP__ACT_FK_MEMB_USER, ACT_ID_MEMBERSHIP__ACT_FK_MEMB_GROUP)

    private lateinit var _actIdUser: ActIdUserPath

    /**
     * Get the implicit join path to the <code>public.act_id_user</code> table.
     */
    fun actIdUser(): ActIdUserPath {
        if (!this::_actIdUser.isInitialized)
            _actIdUser = ActIdUserPath(this, ACT_ID_MEMBERSHIP__ACT_FK_MEMB_USER, null)

        return _actIdUser
    }

    val actIdUser: ActIdUserPath
        get(): ActIdUserPath = actIdUser()

    private lateinit var _actIdGroup: ActIdGroupPath

    /**
     * Get the implicit join path to the <code>public.act_id_group</code> table.
     */
    fun actIdGroup(): ActIdGroupPath {
        if (!this::_actIdGroup.isInitialized)
            _actIdGroup = ActIdGroupPath(this, ACT_ID_MEMBERSHIP__ACT_FK_MEMB_GROUP, null)

        return _actIdGroup
    }

    val actIdGroup: ActIdGroupPath
        get(): ActIdGroupPath = actIdGroup()

    override fun `as`(alias: String): ActIdMembership = ActIdMembership(DSL.name(alias), this)
    override fun `as`(alias: Name): ActIdMembership = ActIdMembership(alias, this)
    override fun `as`(alias: Table<*>): ActIdMembership = ActIdMembership(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActIdMembership = ActIdMembership(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActIdMembership = ActIdMembership(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActIdMembership = ActIdMembership(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActIdMembership =
        ActIdMembership(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActIdMembership = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActIdMembership = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActIdMembership = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActIdMembership = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActIdMembership = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActIdMembership =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActIdMembership =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActIdMembership = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActIdMembership = where(DSL.notExists(select))
}
