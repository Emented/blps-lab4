/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_EVENT_SUBSCR
import emented.jooq.main.indexes.ACT_IDX_EVENT_SUBSCR_CONFIG_
import emented.jooq.main.indexes.ACT_IDX_EVENT_SUBSCR_EVT_NAME
import emented.jooq.main.indexes.ACT_IDX_EVENT_SUBSCR_TENANT_ID
import emented.jooq.main.keys.ACT_RU_EVENT_SUBSCR_PKEY
import emented.jooq.main.keys.ACT_RU_EVENT_SUBSCR__ACT_FK_EVENT_EXEC
import emented.jooq.main.tables.ActRuExecution.ActRuExecutionPath
import emented.jooq.main.tables.records.ActRuEventSubscrRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActRuEventSubscr(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActRuEventSubscrRecord>?,
    parentPath: InverseForeignKey<out Record, ActRuEventSubscrRecord>?,
    aliased: Table<ActRuEventSubscrRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActRuEventSubscrRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ru_event_subscr</code>
         */
        val ACT_RU_EVENT_SUBSCR: ActRuEventSubscr = ActRuEventSubscr()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActRuEventSubscrRecord> = ActRuEventSubscrRecord::class.java

    /**
     * The column <code>public.act_ru_event_subscr.id_</code>.
     */
    val ID_: TableField<ActRuEventSubscrRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_event_subscr.rev_</code>.
     */
    val REV_: TableField<ActRuEventSubscrRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_event_subscr.event_type_</code>.
     */
    val EVENT_TYPE_: TableField<ActRuEventSubscrRecord, String?> =
        createField(DSL.name("event_type_"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_event_subscr.event_name_</code>.
     */
    val EVENT_NAME_: TableField<ActRuEventSubscrRecord, String?> =
        createField(DSL.name("event_name_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_event_subscr.execution_id_</code>.
     */
    val EXECUTION_ID_: TableField<ActRuEventSubscrRecord, String?> =
        createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_event_subscr.proc_inst_id_</code>.
     */
    val PROC_INST_ID_: TableField<ActRuEventSubscrRecord, String?> =
        createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_event_subscr.activity_id_</code>.
     */
    val ACTIVITY_ID_: TableField<ActRuEventSubscrRecord, String?> =
        createField(DSL.name("activity_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_event_subscr.configuration_</code>.
     */
    val CONFIGURATION_: TableField<ActRuEventSubscrRecord, String?> =
        createField(DSL.name("configuration_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_event_subscr.created_</code>.
     */
    val CREATED_: TableField<ActRuEventSubscrRecord, LocalDateTime?> =
        createField(DSL.name("created_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_event_subscr.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActRuEventSubscrRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActRuEventSubscrRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuEventSubscrRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuEventSubscrRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ru_event_subscr</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ru_event_subscr</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ru_event_subscr</code> table reference
     */
    constructor() : this(DSL.name("act_ru_event_subscr"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActRuEventSubscrRecord>?,
        parentPath: InverseForeignKey<out Record, ActRuEventSubscrRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_RU_EVENT_SUBSCR,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActRuEventSubscrPath : ActRuEventSubscr, Path<ActRuEventSubscrRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActRuEventSubscrRecord>?,
            parentPath: InverseForeignKey<out Record, ActRuEventSubscrRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActRuEventSubscrRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActRuEventSubscrPath = ActRuEventSubscrPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActRuEventSubscrPath = ActRuEventSubscrPath(alias, this)
        override fun `as`(alias: Table<*>): ActRuEventSubscrPath = ActRuEventSubscrPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(
        ACT_IDX_EVENT_SUBSCR,
        ACT_IDX_EVENT_SUBSCR_CONFIG_,
        ACT_IDX_EVENT_SUBSCR_EVT_NAME,
        ACT_IDX_EVENT_SUBSCR_TENANT_ID
    )

    override fun getPrimaryKey(): UniqueKey<ActRuEventSubscrRecord> = ACT_RU_EVENT_SUBSCR_PKEY
    override fun getReferences(): List<ForeignKey<ActRuEventSubscrRecord, *>> =
        listOf(ACT_RU_EVENT_SUBSCR__ACT_FK_EVENT_EXEC)

    private lateinit var _actRuExecution: ActRuExecutionPath

    /**
     * Get the implicit join path to the <code>public.act_ru_execution</code>
     * table.
     */
    fun actRuExecution(): ActRuExecutionPath {
        if (!this::_actRuExecution.isInitialized)
            _actRuExecution = ActRuExecutionPath(this, ACT_RU_EVENT_SUBSCR__ACT_FK_EVENT_EXEC, null)

        return _actRuExecution
    }

    val actRuExecution: ActRuExecutionPath
        get(): ActRuExecutionPath = actRuExecution()

    override fun `as`(alias: String): ActRuEventSubscr = ActRuEventSubscr(DSL.name(alias), this)
    override fun `as`(alias: Name): ActRuEventSubscr = ActRuEventSubscr(alias, this)
    override fun `as`(alias: Table<*>): ActRuEventSubscr = ActRuEventSubscr(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActRuEventSubscr = ActRuEventSubscr(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActRuEventSubscr = ActRuEventSubscr(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActRuEventSubscr = ActRuEventSubscr(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActRuEventSubscr =
        ActRuEventSubscr(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActRuEventSubscr = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActRuEventSubscr = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActRuEventSubscr = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActRuEventSubscr = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActRuEventSubscr = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActRuEventSubscr =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActRuEventSubscr =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActRuEventSubscr = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActRuEventSubscr = where(DSL.notExists(select))
}
