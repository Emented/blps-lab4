/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_AUTH_GROUP_ID
import emented.jooq.main.indexes.ACT_IDX_AUTH_RESOURCE_ID
import emented.jooq.main.indexes.ACT_IDX_AUTH_RM_TIME
import emented.jooq.main.indexes.ACT_IDX_AUTH_ROOT_PI
import emented.jooq.main.keys.ACT_RU_AUTHORIZATION_PKEY
import emented.jooq.main.keys.ACT_UNIQ_AUTH_GROUP
import emented.jooq.main.keys.ACT_UNIQ_AUTH_USER
import emented.jooq.main.tables.records.ActRuAuthorizationRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActRuAuthorization(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActRuAuthorizationRecord>?,
    parentPath: InverseForeignKey<out Record, ActRuAuthorizationRecord>?,
    aliased: Table<ActRuAuthorizationRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActRuAuthorizationRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ru_authorization</code>
         */
        val ACT_RU_AUTHORIZATION: ActRuAuthorization = ActRuAuthorization()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActRuAuthorizationRecord> = ActRuAuthorizationRecord::class.java

    /**
     * The column <code>public.act_ru_authorization.id_</code>.
     */
    val ID_: TableField<ActRuAuthorizationRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_authorization.rev_</code>.
     */
    val REV_: TableField<ActRuAuthorizationRecord, Int?> =
        createField(DSL.name("rev_"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.act_ru_authorization.type_</code>.
     */
    val TYPE_: TableField<ActRuAuthorizationRecord, Int?> =
        createField(DSL.name("type_"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.act_ru_authorization.group_id_</code>.
     */
    val GROUP_ID_: TableField<ActRuAuthorizationRecord, String?> =
        createField(DSL.name("group_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_authorization.user_id_</code>.
     */
    val USER_ID_: TableField<ActRuAuthorizationRecord, String?> =
        createField(DSL.name("user_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_authorization.resource_type_</code>.
     */
    val RESOURCE_TYPE_: TableField<ActRuAuthorizationRecord, Int?> =
        createField(DSL.name("resource_type_"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.act_ru_authorization.resource_id_</code>.
     */
    val RESOURCE_ID_: TableField<ActRuAuthorizationRecord, String?> =
        createField(DSL.name("resource_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_authorization.perms_</code>.
     */
    val PERMS_: TableField<ActRuAuthorizationRecord, Int?> =
        createField(DSL.name("perms_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_authorization.removal_time_</code>.
     */
    val REMOVAL_TIME_: TableField<ActRuAuthorizationRecord, LocalDateTime?> =
        createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_ru_authorization.root_proc_inst_id_</code>.
     */
    val ROOT_PROC_INST_ID_: TableField<ActRuAuthorizationRecord, String?> =
        createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActRuAuthorizationRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuAuthorizationRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuAuthorizationRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ru_authorization</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ru_authorization</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ru_authorization</code> table reference
     */
    constructor() : this(DSL.name("act_ru_authorization"), null)

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> =
        listOf(ACT_IDX_AUTH_GROUP_ID, ACT_IDX_AUTH_RESOURCE_ID, ACT_IDX_AUTH_RM_TIME, ACT_IDX_AUTH_ROOT_PI)

    override fun getPrimaryKey(): UniqueKey<ActRuAuthorizationRecord> = ACT_RU_AUTHORIZATION_PKEY
    override fun getUniqueKeys(): List<UniqueKey<ActRuAuthorizationRecord>> =
        listOf(ACT_UNIQ_AUTH_GROUP, ACT_UNIQ_AUTH_USER)

    override fun `as`(alias: String): ActRuAuthorization = ActRuAuthorization(DSL.name(alias), this)
    override fun `as`(alias: Name): ActRuAuthorization = ActRuAuthorization(alias, this)
    override fun `as`(alias: Table<*>): ActRuAuthorization = ActRuAuthorization(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActRuAuthorization = ActRuAuthorization(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActRuAuthorization = ActRuAuthorization(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActRuAuthorization = ActRuAuthorization(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActRuAuthorization =
        ActRuAuthorization(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActRuAuthorization = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActRuAuthorization = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActRuAuthorization = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActRuAuthorization = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActRuAuthorization = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActRuAuthorization =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActRuAuthorization =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActRuAuthorization = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActRuAuthorization = where(DSL.notExists(select))
}
