/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_ACT_INST
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_BYTEAR
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_CASE_EXEC
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_CASE_INST
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_NAME
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_PROC_DEF_KEY
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_PROC_INST
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_RM_TIME
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_ROOT_PI
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_TASK_BYTEAR
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_TASK_ID
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_TENANT_ID
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_TIME
import emented.jooq.main.indexes.ACT_IDX_HI_DETAIL_VAR_INST_ID
import emented.jooq.main.keys.ACT_HI_DETAIL_PKEY
import emented.jooq.main.tables.records.ActHiDetailRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActHiDetail(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActHiDetailRecord>?,
    parentPath: InverseForeignKey<out Record, ActHiDetailRecord>?,
    aliased: Table<ActHiDetailRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActHiDetailRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_hi_detail</code>
         */
        val ACT_HI_DETAIL: ActHiDetail = ActHiDetail()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActHiDetailRecord> = ActHiDetailRecord::class.java

    /**
     * The column <code>public.act_hi_detail.id_</code>.
     */
    val ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_detail.type_</code>.
     */
    val TYPE_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("type_"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_detail.proc_def_key_</code>.
     */
    val PROC_DEF_KEY_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("proc_def_key_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_detail.proc_def_id_</code>.
     */
    val PROC_DEF_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.root_proc_inst_id_</code>.
     */
    val ROOT_PROC_INST_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.proc_inst_id_</code>.
     */
    val PROC_INST_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.execution_id_</code>.
     */
    val EXECUTION_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.case_def_key_</code>.
     */
    val CASE_DEF_KEY_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("case_def_key_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_detail.case_def_id_</code>.
     */
    val CASE_DEF_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("case_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.case_inst_id_</code>.
     */
    val CASE_INST_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.case_execution_id_</code>.
     */
    val CASE_EXECUTION_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("case_execution_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.task_id_</code>.
     */
    val TASK_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("task_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.act_inst_id_</code>.
     */
    val ACT_INST_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("act_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.var_inst_id_</code>.
     */
    val VAR_INST_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("var_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.name_</code>.
     */
    val NAME_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("name_"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_detail.var_type_</code>.
     */
    val VAR_TYPE_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("var_type_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.rev_</code>.
     */
    val REV_: TableField<ActHiDetailRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_hi_detail.time_</code>.
     */
    val TIME_: TableField<ActHiDetailRecord, LocalDateTime?> =
        createField(DSL.name("time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_detail.bytearray_id_</code>.
     */
    val BYTEARRAY_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("bytearray_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.double_</code>.
     */
    val DOUBLE_: TableField<ActHiDetailRecord, Double?> = createField(DSL.name("double_"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.act_hi_detail.long_</code>.
     */
    val LONG_: TableField<ActHiDetailRecord, Long?> = createField(DSL.name("long_"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.act_hi_detail.text_</code>.
     */
    val TEXT_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("text_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_hi_detail.text2_</code>.
     */
    val TEXT2_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("text2_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_hi_detail.sequence_counter_</code>.
     */
    val SEQUENCE_COUNTER_: TableField<ActHiDetailRecord, Long?> =
        createField(DSL.name("sequence_counter_"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.act_hi_detail.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.operation_id_</code>.
     */
    val OPERATION_ID_: TableField<ActHiDetailRecord, String?> =
        createField(DSL.name("operation_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_detail.removal_time_</code>.
     */
    val REMOVAL_TIME_: TableField<ActHiDetailRecord, LocalDateTime?> =
        createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_hi_detail.initial_</code>.
     */
    val INITIAL_: TableField<ActHiDetailRecord, Boolean?> =
        createField(DSL.name("initial_"), SQLDataType.BOOLEAN, this, "")

    private constructor(alias: Name, aliased: Table<ActHiDetailRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActHiDetailRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActHiDetailRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_hi_detail</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_hi_detail</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_hi_detail</code> table reference
     */
    constructor() : this(DSL.name("act_hi_detail"), null)

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(
        ACT_IDX_HI_DETAIL_ACT_INST,
        ACT_IDX_HI_DETAIL_BYTEAR,
        ACT_IDX_HI_DETAIL_CASE_EXEC,
        ACT_IDX_HI_DETAIL_CASE_INST,
        ACT_IDX_HI_DETAIL_NAME,
        ACT_IDX_HI_DETAIL_PROC_DEF_KEY,
        ACT_IDX_HI_DETAIL_PROC_INST,
        ACT_IDX_HI_DETAIL_RM_TIME,
        ACT_IDX_HI_DETAIL_ROOT_PI,
        ACT_IDX_HI_DETAIL_TASK_BYTEAR,
        ACT_IDX_HI_DETAIL_TASK_ID,
        ACT_IDX_HI_DETAIL_TENANT_ID,
        ACT_IDX_HI_DETAIL_TIME,
        ACT_IDX_HI_DETAIL_VAR_INST_ID
    )

    override fun getPrimaryKey(): UniqueKey<ActHiDetailRecord> = ACT_HI_DETAIL_PKEY
    override fun `as`(alias: String): ActHiDetail = ActHiDetail(DSL.name(alias), this)
    override fun `as`(alias: Name): ActHiDetail = ActHiDetail(alias, this)
    override fun `as`(alias: Table<*>): ActHiDetail = ActHiDetail(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActHiDetail = ActHiDetail(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActHiDetail = ActHiDetail(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActHiDetail = ActHiDetail(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActHiDetail =
        ActHiDetail(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActHiDetail = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActHiDetail = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActHiDetail = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActHiDetail = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActHiDetail = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActHiDetail =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActHiDetail =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActHiDetail = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActHiDetail = where(DSL.notExists(select))
}
