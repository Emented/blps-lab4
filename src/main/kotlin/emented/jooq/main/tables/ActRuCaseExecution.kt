/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_CASE_EXEC_BUSKEY
import emented.jooq.main.indexes.ACT_IDX_CASE_EXEC_TENANT_ID
import emented.jooq.main.indexes.ACT_IDX_CASE_EXE_CASE_DEF
import emented.jooq.main.indexes.ACT_IDX_CASE_EXE_CASE_INST
import emented.jooq.main.indexes.ACT_IDX_CASE_EXE_PARENT
import emented.jooq.main.keys.ACT_RU_CASE_EXECUTION_PKEY
import emented.jooq.main.keys.ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_DEF
import emented.jooq.main.keys.ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_INST
import emented.jooq.main.keys.ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_PARENT
import emented.jooq.main.keys.ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_EXEC
import emented.jooq.main.keys.ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_INST
import emented.jooq.main.keys.ACT_RU_TASK__ACT_FK_TASK_CASE_EXE
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_CASE_EXE
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_CASE_INST
import emented.jooq.main.tables.ActReCaseDef.ActReCaseDefPath
import emented.jooq.main.tables.ActRuCaseSentryPart.ActRuCaseSentryPartPath
import emented.jooq.main.tables.ActRuTask.ActRuTaskPath
import emented.jooq.main.tables.ActRuVariable.ActRuVariablePath
import emented.jooq.main.tables.records.ActRuCaseExecutionRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActRuCaseExecution(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActRuCaseExecutionRecord>?,
    parentPath: InverseForeignKey<out Record, ActRuCaseExecutionRecord>?,
    aliased: Table<ActRuCaseExecutionRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActRuCaseExecutionRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ru_case_execution</code>
         */
        val ACT_RU_CASE_EXECUTION: ActRuCaseExecution = ActRuCaseExecution()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActRuCaseExecutionRecord> = ActRuCaseExecutionRecord::class.java

    /**
     * The column <code>public.act_ru_case_execution.id_</code>.
     */
    val ID_: TableField<ActRuCaseExecutionRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_case_execution.rev_</code>.
     */
    val REV_: TableField<ActRuCaseExecutionRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_case_execution.case_inst_id_</code>.
     */
    val CASE_INST_ID_: TableField<ActRuCaseExecutionRecord, String?> =
        createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_case_execution.super_case_exec_</code>.
     */
    val SUPER_CASE_EXEC_: TableField<ActRuCaseExecutionRecord, String?> =
        createField(DSL.name("super_case_exec_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_case_execution.super_exec_</code>.
     */
    val SUPER_EXEC_: TableField<ActRuCaseExecutionRecord, String?> =
        createField(DSL.name("super_exec_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_case_execution.business_key_</code>.
     */
    val BUSINESS_KEY_: TableField<ActRuCaseExecutionRecord, String?> =
        createField(DSL.name("business_key_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_case_execution.parent_id_</code>.
     */
    val PARENT_ID_: TableField<ActRuCaseExecutionRecord, String?> =
        createField(DSL.name("parent_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_case_execution.case_def_id_</code>.
     */
    val CASE_DEF_ID_: TableField<ActRuCaseExecutionRecord, String?> =
        createField(DSL.name("case_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_case_execution.act_id_</code>.
     */
    val ACT_ID_: TableField<ActRuCaseExecutionRecord, String?> =
        createField(DSL.name("act_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_case_execution.prev_state_</code>.
     */
    val PREV_STATE_: TableField<ActRuCaseExecutionRecord, Int?> =
        createField(DSL.name("prev_state_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_case_execution.current_state_</code>.
     */
    val CURRENT_STATE_: TableField<ActRuCaseExecutionRecord, Int?> =
        createField(DSL.name("current_state_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_case_execution.required_</code>.
     */
    val REQUIRED_: TableField<ActRuCaseExecutionRecord, Boolean?> =
        createField(DSL.name("required_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_ru_case_execution.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActRuCaseExecutionRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActRuCaseExecutionRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuCaseExecutionRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuCaseExecutionRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ru_case_execution</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ru_case_execution</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ru_case_execution</code> table reference
     */
    constructor() : this(DSL.name("act_ru_case_execution"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActRuCaseExecutionRecord>?,
        parentPath: InverseForeignKey<out Record, ActRuCaseExecutionRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_RU_CASE_EXECUTION,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActRuCaseExecutionPath : ActRuCaseExecution, Path<ActRuCaseExecutionRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActRuCaseExecutionRecord>?,
            parentPath: InverseForeignKey<out Record, ActRuCaseExecutionRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActRuCaseExecutionRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActRuCaseExecutionPath = ActRuCaseExecutionPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActRuCaseExecutionPath = ActRuCaseExecutionPath(alias, this)
        override fun `as`(alias: Table<*>): ActRuCaseExecutionPath = ActRuCaseExecutionPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(
        ACT_IDX_CASE_EXE_CASE_DEF,
        ACT_IDX_CASE_EXE_CASE_INST,
        ACT_IDX_CASE_EXE_PARENT,
        ACT_IDX_CASE_EXEC_BUSKEY,
        ACT_IDX_CASE_EXEC_TENANT_ID
    )

    override fun getPrimaryKey(): UniqueKey<ActRuCaseExecutionRecord> = ACT_RU_CASE_EXECUTION_PKEY
    override fun getReferences(): List<ForeignKey<ActRuCaseExecutionRecord, *>> = listOf(
        ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_INST,
        ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_PARENT,
        ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_DEF
    )

    private lateinit var _actFkCaseExeCaseInst: ActRuCaseExecutionPath

    /**
     * Get the implicit join path to the
     * <code>public.act_ru_case_execution</code> table, via the
     * <code>act_fk_case_exe_case_inst</code> key.
     */
    fun actFkCaseExeCaseInst(): ActRuCaseExecutionPath {
        if (!this::_actFkCaseExeCaseInst.isInitialized)
            _actFkCaseExeCaseInst = ActRuCaseExecutionPath(this, ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_INST, null)

        return _actFkCaseExeCaseInst
    }

    val actFkCaseExeCaseInst: ActRuCaseExecutionPath
        get(): ActRuCaseExecutionPath = actFkCaseExeCaseInst()

    private lateinit var _actFkCaseExeParent: ActRuCaseExecutionPath

    /**
     * Get the implicit join path to the
     * <code>public.act_ru_case_execution</code> table, via the
     * <code>act_fk_case_exe_parent</code> key.
     */
    fun actFkCaseExeParent(): ActRuCaseExecutionPath {
        if (!this::_actFkCaseExeParent.isInitialized)
            _actFkCaseExeParent = ActRuCaseExecutionPath(this, ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_PARENT, null)

        return _actFkCaseExeParent
    }

    val actFkCaseExeParent: ActRuCaseExecutionPath
        get(): ActRuCaseExecutionPath = actFkCaseExeParent()

    private lateinit var _actReCaseDef: ActReCaseDefPath

    /**
     * Get the implicit join path to the <code>public.act_re_case_def</code>
     * table.
     */
    fun actReCaseDef(): ActReCaseDefPath {
        if (!this::_actReCaseDef.isInitialized)
            _actReCaseDef = ActReCaseDefPath(this, ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_DEF, null)

        return _actReCaseDef
    }

    val actReCaseDef: ActReCaseDefPath
        get(): ActReCaseDefPath = actReCaseDef()

    private lateinit var _actFkCaseSentryCaseExec: ActRuCaseSentryPartPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_case_sentry_part</code> table, via the
     * <code>act_fk_case_sentry_case_exec</code> key
     */
    fun actFkCaseSentryCaseExec(): ActRuCaseSentryPartPath {
        if (!this::_actFkCaseSentryCaseExec.isInitialized)
            _actFkCaseSentryCaseExec =
                ActRuCaseSentryPartPath(this, null, ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_EXEC.inverseKey)

        return _actFkCaseSentryCaseExec
    }

    val actFkCaseSentryCaseExec: ActRuCaseSentryPartPath
        get(): ActRuCaseSentryPartPath = actFkCaseSentryCaseExec()

    private lateinit var _actFkCaseSentryCaseInst: ActRuCaseSentryPartPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_case_sentry_part</code> table, via the
     * <code>act_fk_case_sentry_case_inst</code> key
     */
    fun actFkCaseSentryCaseInst(): ActRuCaseSentryPartPath {
        if (!this::_actFkCaseSentryCaseInst.isInitialized)
            _actFkCaseSentryCaseInst =
                ActRuCaseSentryPartPath(this, null, ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_INST.inverseKey)

        return _actFkCaseSentryCaseInst
    }

    val actFkCaseSentryCaseInst: ActRuCaseSentryPartPath
        get(): ActRuCaseSentryPartPath = actFkCaseSentryCaseInst()

    private lateinit var _actRuTask: ActRuTaskPath

    /**
     * Get the implicit to-many join path to the <code>public.act_ru_task</code>
     * table
     */
    fun actRuTask(): ActRuTaskPath {
        if (!this::_actRuTask.isInitialized)
            _actRuTask = ActRuTaskPath(this, null, ACT_RU_TASK__ACT_FK_TASK_CASE_EXE.inverseKey)

        return _actRuTask
    }

    val actRuTask: ActRuTaskPath
        get(): ActRuTaskPath = actRuTask()

    private lateinit var _actFkVarCaseExe: ActRuVariablePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_variable</code> table, via the
     * <code>act_fk_var_case_exe</code> key
     */
    fun actFkVarCaseExe(): ActRuVariablePath {
        if (!this::_actFkVarCaseExe.isInitialized)
            _actFkVarCaseExe = ActRuVariablePath(this, null, ACT_RU_VARIABLE__ACT_FK_VAR_CASE_EXE.inverseKey)

        return _actFkVarCaseExe
    }

    val actFkVarCaseExe: ActRuVariablePath
        get(): ActRuVariablePath = actFkVarCaseExe()

    private lateinit var _actFkVarCaseInst: ActRuVariablePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_variable</code> table, via the
     * <code>act_fk_var_case_inst</code> key
     */
    fun actFkVarCaseInst(): ActRuVariablePath {
        if (!this::_actFkVarCaseInst.isInitialized)
            _actFkVarCaseInst = ActRuVariablePath(this, null, ACT_RU_VARIABLE__ACT_FK_VAR_CASE_INST.inverseKey)

        return _actFkVarCaseInst
    }

    val actFkVarCaseInst: ActRuVariablePath
        get(): ActRuVariablePath = actFkVarCaseInst()

    override fun `as`(alias: String): ActRuCaseExecution = ActRuCaseExecution(DSL.name(alias), this)
    override fun `as`(alias: Name): ActRuCaseExecution = ActRuCaseExecution(alias, this)
    override fun `as`(alias: Table<*>): ActRuCaseExecution = ActRuCaseExecution(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActRuCaseExecution = ActRuCaseExecution(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActRuCaseExecution = ActRuCaseExecution(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActRuCaseExecution = ActRuCaseExecution(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActRuCaseExecution =
        ActRuCaseExecution(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActRuCaseExecution = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActRuCaseExecution = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActRuCaseExecution = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActRuCaseExecution = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActRuCaseExecution = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActRuCaseExecution =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActRuCaseExecution =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActRuCaseExecution = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActRuCaseExecution = where(DSL.notExists(select))
}
