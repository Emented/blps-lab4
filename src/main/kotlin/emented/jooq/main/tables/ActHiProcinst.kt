/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_HI_PI_PDEFID_END_TIME
import emented.jooq.main.indexes.ACT_IDX_HI_PRO_INST_END
import emented.jooq.main.indexes.ACT_IDX_HI_PRO_INST_PROC_DEF_KEY
import emented.jooq.main.indexes.ACT_IDX_HI_PRO_INST_PROC_TIME
import emented.jooq.main.indexes.ACT_IDX_HI_PRO_INST_RM_TIME
import emented.jooq.main.indexes.ACT_IDX_HI_PRO_INST_ROOT_PI
import emented.jooq.main.indexes.ACT_IDX_HI_PRO_INST_TENANT_ID
import emented.jooq.main.indexes.ACT_IDX_HI_PRO_I_BUSKEY
import emented.jooq.main.keys.ACT_HI_PROCINST_PKEY
import emented.jooq.main.keys.ACT_HI_PROCINST_PROC_INST_ID__KEY
import emented.jooq.main.tables.records.ActHiProcinstRecord

import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActHiProcinst(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActHiProcinstRecord>?,
    parentPath: InverseForeignKey<out Record, ActHiProcinstRecord>?,
    aliased: Table<ActHiProcinstRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActHiProcinstRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_hi_procinst</code>
         */
        val ACT_HI_PROCINST: ActHiProcinst = ActHiProcinst()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActHiProcinstRecord> = ActHiProcinstRecord::class.java

    /**
     * The column <code>public.act_hi_procinst.id_</code>.
     */
    val ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_procinst.proc_inst_id_</code>.
     */
    val PROC_INST_ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_procinst.business_key_</code>.
     */
    val BUSINESS_KEY_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("business_key_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_procinst.proc_def_key_</code>.
     */
    val PROC_DEF_KEY_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("proc_def_key_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_procinst.proc_def_id_</code>.
     */
    val PROC_DEF_ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_procinst.start_time_</code>.
     */
    val START_TIME_: TableField<ActHiProcinstRecord, LocalDateTime?> =
        createField(DSL.name("start_time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_procinst.end_time_</code>.
     */
    val END_TIME_: TableField<ActHiProcinstRecord, LocalDateTime?> =
        createField(DSL.name("end_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_hi_procinst.removal_time_</code>.
     */
    val REMOVAL_TIME_: TableField<ActHiProcinstRecord, LocalDateTime?> =
        createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_hi_procinst.duration_</code>.
     */
    val DURATION_: TableField<ActHiProcinstRecord, Long?> =
        createField(DSL.name("duration_"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.act_hi_procinst.start_user_id_</code>.
     */
    val START_USER_ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("start_user_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_procinst.start_act_id_</code>.
     */
    val START_ACT_ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("start_act_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_procinst.end_act_id_</code>.
     */
    val END_ACT_ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("end_act_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column
     * <code>public.act_hi_procinst.super_process_instance_id_</code>.
     */
    val SUPER_PROCESS_INSTANCE_ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("super_process_instance_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_procinst.root_proc_inst_id_</code>.
     */
    val ROOT_PROC_INST_ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_procinst.super_case_instance_id_</code>.
     */
    val SUPER_CASE_INSTANCE_ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("super_case_instance_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_procinst.case_inst_id_</code>.
     */
    val CASE_INST_ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_procinst.delete_reason_</code>.
     */
    val DELETE_REASON_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("delete_reason_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_hi_procinst.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_procinst.state_</code>.
     */
    val STATE_: TableField<ActHiProcinstRecord, String?> =
        createField(DSL.name("state_"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<ActHiProcinstRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActHiProcinstRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActHiProcinstRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_hi_procinst</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_hi_procinst</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_hi_procinst</code> table reference
     */
    constructor() : this(DSL.name("act_hi_procinst"), null)

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(
        ACT_IDX_HI_PI_PDEFID_END_TIME,
        ACT_IDX_HI_PRO_I_BUSKEY,
        ACT_IDX_HI_PRO_INST_END,
        ACT_IDX_HI_PRO_INST_PROC_DEF_KEY,
        ACT_IDX_HI_PRO_INST_PROC_TIME,
        ACT_IDX_HI_PRO_INST_RM_TIME,
        ACT_IDX_HI_PRO_INST_ROOT_PI,
        ACT_IDX_HI_PRO_INST_TENANT_ID
    )

    override fun getPrimaryKey(): UniqueKey<ActHiProcinstRecord> = ACT_HI_PROCINST_PKEY
    override fun getUniqueKeys(): List<UniqueKey<ActHiProcinstRecord>> = listOf(ACT_HI_PROCINST_PROC_INST_ID__KEY)
    override fun `as`(alias: String): ActHiProcinst = ActHiProcinst(DSL.name(alias), this)
    override fun `as`(alias: Name): ActHiProcinst = ActHiProcinst(alias, this)
    override fun `as`(alias: Table<*>): ActHiProcinst = ActHiProcinst(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActHiProcinst = ActHiProcinst(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActHiProcinst = ActHiProcinst(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActHiProcinst = ActHiProcinst(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActHiProcinst =
        ActHiProcinst(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActHiProcinst = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActHiProcinst = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActHiProcinst = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActHiProcinst = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActHiProcinst = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActHiProcinst =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActHiProcinst =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActHiProcinst = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActHiProcinst = where(DSL.notExists(select))
}
