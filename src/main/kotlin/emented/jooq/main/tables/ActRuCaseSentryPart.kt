/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_CASE_SENTRY_CASE_EXEC
import emented.jooq.main.indexes.ACT_IDX_CASE_SENTRY_CASE_INST
import emented.jooq.main.keys.ACT_RU_CASE_SENTRY_PART_PKEY
import emented.jooq.main.keys.ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_EXEC
import emented.jooq.main.keys.ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_INST
import emented.jooq.main.tables.ActRuCaseExecution.ActRuCaseExecutionPath
import emented.jooq.main.tables.records.ActRuCaseSentryPartRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActRuCaseSentryPart(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActRuCaseSentryPartRecord>?,
    parentPath: InverseForeignKey<out Record, ActRuCaseSentryPartRecord>?,
    aliased: Table<ActRuCaseSentryPartRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActRuCaseSentryPartRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ru_case_sentry_part</code>
         */
        val ACT_RU_CASE_SENTRY_PART: ActRuCaseSentryPart = ActRuCaseSentryPart()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActRuCaseSentryPartRecord> = ActRuCaseSentryPartRecord::class.java

    /**
     * The column <code>public.act_ru_case_sentry_part.id_</code>.
     */
    val ID_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.rev_</code>.
     */
    val REV_: TableField<ActRuCaseSentryPartRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.case_inst_id_</code>.
     */
    val CASE_INST_ID_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.case_exec_id_</code>.
     */
    val CASE_EXEC_ID_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("case_exec_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.sentry_id_</code>.
     */
    val SENTRY_ID_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("sentry_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.type_</code>.
     */
    val TYPE_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("type_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column
     * <code>public.act_ru_case_sentry_part.source_case_exec_id_</code>.
     */
    val SOURCE_CASE_EXEC_ID_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("source_case_exec_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.standard_event_</code>.
     */
    val STANDARD_EVENT_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("standard_event_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.source_</code>.
     */
    val SOURCE_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("source_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.variable_event_</code>.
     */
    val VARIABLE_EVENT_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("variable_event_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.variable_name_</code>.
     */
    val VARIABLE_NAME_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("variable_name_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.satisfied_</code>.
     */
    val SATISFIED_: TableField<ActRuCaseSentryPartRecord, Boolean?> =
        createField(DSL.name("satisfied_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_ru_case_sentry_part.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActRuCaseSentryPartRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActRuCaseSentryPartRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuCaseSentryPartRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuCaseSentryPartRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ru_case_sentry_part</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ru_case_sentry_part</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ru_case_sentry_part</code> table reference
     */
    constructor() : this(DSL.name("act_ru_case_sentry_part"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActRuCaseSentryPartRecord>?,
        parentPath: InverseForeignKey<out Record, ActRuCaseSentryPartRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_RU_CASE_SENTRY_PART,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActRuCaseSentryPartPath : ActRuCaseSentryPart, Path<ActRuCaseSentryPartRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActRuCaseSentryPartRecord>?,
            parentPath: InverseForeignKey<out Record, ActRuCaseSentryPartRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActRuCaseSentryPartRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActRuCaseSentryPartPath = ActRuCaseSentryPartPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActRuCaseSentryPartPath = ActRuCaseSentryPartPath(alias, this)
        override fun `as`(alias: Table<*>): ActRuCaseSentryPartPath = ActRuCaseSentryPartPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(ACT_IDX_CASE_SENTRY_CASE_EXEC, ACT_IDX_CASE_SENTRY_CASE_INST)
    override fun getPrimaryKey(): UniqueKey<ActRuCaseSentryPartRecord> = ACT_RU_CASE_SENTRY_PART_PKEY
    override fun getReferences(): List<ForeignKey<ActRuCaseSentryPartRecord, *>> = listOf(
        ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_INST,
        ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_EXEC
    )

    private lateinit var _actFkCaseSentryCaseInst: ActRuCaseExecutionPath

    /**
     * Get the implicit join path to the
     * <code>public.act_ru_case_execution</code> table, via the
     * <code>act_fk_case_sentry_case_inst</code> key.
     */
    fun actFkCaseSentryCaseInst(): ActRuCaseExecutionPath {
        if (!this::_actFkCaseSentryCaseInst.isInitialized)
            _actFkCaseSentryCaseInst =
                ActRuCaseExecutionPath(this, ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_INST, null)

        return _actFkCaseSentryCaseInst
    }

    val actFkCaseSentryCaseInst: ActRuCaseExecutionPath
        get(): ActRuCaseExecutionPath = actFkCaseSentryCaseInst()

    private lateinit var _actFkCaseSentryCaseExec: ActRuCaseExecutionPath

    /**
     * Get the implicit join path to the
     * <code>public.act_ru_case_execution</code> table, via the
     * <code>act_fk_case_sentry_case_exec</code> key.
     */
    fun actFkCaseSentryCaseExec(): ActRuCaseExecutionPath {
        if (!this::_actFkCaseSentryCaseExec.isInitialized)
            _actFkCaseSentryCaseExec =
                ActRuCaseExecutionPath(this, ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_EXEC, null)

        return _actFkCaseSentryCaseExec
    }

    val actFkCaseSentryCaseExec: ActRuCaseExecutionPath
        get(): ActRuCaseExecutionPath = actFkCaseSentryCaseExec()

    override fun `as`(alias: String): ActRuCaseSentryPart = ActRuCaseSentryPart(DSL.name(alias), this)
    override fun `as`(alias: Name): ActRuCaseSentryPart = ActRuCaseSentryPart(alias, this)
    override fun `as`(alias: Table<*>): ActRuCaseSentryPart = ActRuCaseSentryPart(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActRuCaseSentryPart = ActRuCaseSentryPart(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActRuCaseSentryPart = ActRuCaseSentryPart(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActRuCaseSentryPart = ActRuCaseSentryPart(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActRuCaseSentryPart =
        ActRuCaseSentryPart(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActRuCaseSentryPart = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActRuCaseSentryPart = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActRuCaseSentryPart = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActRuCaseSentryPart = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActRuCaseSentryPart = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActRuCaseSentryPart =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActRuCaseSentryPart =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActRuCaseSentryPart = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActRuCaseSentryPart = where(DSL.notExists(select))
}
