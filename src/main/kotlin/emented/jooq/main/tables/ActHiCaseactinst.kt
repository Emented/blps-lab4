/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_HI_CAS_A_I_COMP
import emented.jooq.main.indexes.ACT_IDX_HI_CAS_A_I_CREATE
import emented.jooq.main.indexes.ACT_IDX_HI_CAS_A_I_END
import emented.jooq.main.indexes.ACT_IDX_HI_CAS_A_I_TENANT_ID
import emented.jooq.main.keys.ACT_HI_CASEACTINST_PKEY
import emented.jooq.main.tables.records.ActHiCaseactinstRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActHiCaseactinst(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActHiCaseactinstRecord>?,
    parentPath: InverseForeignKey<out Record, ActHiCaseactinstRecord>?,
    aliased: Table<ActHiCaseactinstRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActHiCaseactinstRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_hi_caseactinst</code>
         */
        val ACT_HI_CASEACTINST: ActHiCaseactinst = ActHiCaseactinst()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActHiCaseactinstRecord> = ActHiCaseactinstRecord::class.java

    /**
     * The column <code>public.act_hi_caseactinst.id_</code>.
     */
    val ID_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.parent_act_inst_id_</code>.
     */
    val PARENT_ACT_INST_ID_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("parent_act_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.case_def_id_</code>.
     */
    val CASE_DEF_ID_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("case_def_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.case_inst_id_</code>.
     */
    val CASE_INST_ID_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.case_act_id_</code>.
     */
    val CASE_ACT_ID_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("case_act_id_"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.task_id_</code>.
     */
    val TASK_ID_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("task_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.call_proc_inst_id_</code>.
     */
    val CALL_PROC_INST_ID_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("call_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.call_case_inst_id_</code>.
     */
    val CALL_CASE_INST_ID_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("call_case_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.case_act_name_</code>.
     */
    val CASE_ACT_NAME_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("case_act_name_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.case_act_type_</code>.
     */
    val CASE_ACT_TYPE_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("case_act_type_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.create_time_</code>.
     */
    val CREATE_TIME_: TableField<ActHiCaseactinstRecord, LocalDateTime?> =
        createField(DSL.name("create_time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.end_time_</code>.
     */
    val END_TIME_: TableField<ActHiCaseactinstRecord, LocalDateTime?> =
        createField(DSL.name("end_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_hi_caseactinst.duration_</code>.
     */
    val DURATION_: TableField<ActHiCaseactinstRecord, Long?> =
        createField(DSL.name("duration_"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.act_hi_caseactinst.state_</code>.
     */
    val STATE_: TableField<ActHiCaseactinstRecord, Int?> =
        createField(DSL.name("state_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_hi_caseactinst.required_</code>.
     */
    val REQUIRED_: TableField<ActHiCaseactinstRecord, Boolean?> =
        createField(DSL.name("required_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_hi_caseactinst.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActHiCaseactinstRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActHiCaseactinstRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActHiCaseactinstRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActHiCaseactinstRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_hi_caseactinst</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_hi_caseactinst</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_hi_caseactinst</code> table reference
     */
    constructor() : this(DSL.name("act_hi_caseactinst"), null)

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> =
        listOf(ACT_IDX_HI_CAS_A_I_COMP, ACT_IDX_HI_CAS_A_I_CREATE, ACT_IDX_HI_CAS_A_I_END, ACT_IDX_HI_CAS_A_I_TENANT_ID)

    override fun getPrimaryKey(): UniqueKey<ActHiCaseactinstRecord> = ACT_HI_CASEACTINST_PKEY
    override fun `as`(alias: String): ActHiCaseactinst = ActHiCaseactinst(DSL.name(alias), this)
    override fun `as`(alias: Name): ActHiCaseactinst = ActHiCaseactinst(alias, this)
    override fun `as`(alias: Table<*>): ActHiCaseactinst = ActHiCaseactinst(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActHiCaseactinst = ActHiCaseactinst(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActHiCaseactinst = ActHiCaseactinst(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActHiCaseactinst = ActHiCaseactinst(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActHiCaseactinst =
        ActHiCaseactinst(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActHiCaseactinst = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActHiCaseactinst = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActHiCaseactinst = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActHiCaseactinst = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActHiCaseactinst = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActHiCaseactinst =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActHiCaseactinst =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActHiCaseactinst = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActHiCaseactinst = where(DSL.notExists(select))
}
