/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_INC_CAUSEINCID
import emented.jooq.main.indexes.ACT_IDX_INC_CONFIGURATION
import emented.jooq.main.indexes.ACT_IDX_INC_EXID
import emented.jooq.main.indexes.ACT_IDX_INC_JOB_DEF
import emented.jooq.main.indexes.ACT_IDX_INC_PROCDEFID
import emented.jooq.main.indexes.ACT_IDX_INC_PROCINSTID
import emented.jooq.main.indexes.ACT_IDX_INC_ROOTCAUSEINCID
import emented.jooq.main.indexes.ACT_IDX_INC_TENANT_ID
import emented.jooq.main.keys.ACT_RU_INCIDENT_PKEY
import emented.jooq.main.keys.ACT_RU_INCIDENT__ACT_FK_INC_CAUSE
import emented.jooq.main.keys.ACT_RU_INCIDENT__ACT_FK_INC_EXE
import emented.jooq.main.keys.ACT_RU_INCIDENT__ACT_FK_INC_JOB_DEF
import emented.jooq.main.keys.ACT_RU_INCIDENT__ACT_FK_INC_PROCDEF
import emented.jooq.main.keys.ACT_RU_INCIDENT__ACT_FK_INC_PROCINST
import emented.jooq.main.keys.ACT_RU_INCIDENT__ACT_FK_INC_RCAUSE
import emented.jooq.main.tables.ActReProcdef.ActReProcdefPath
import emented.jooq.main.tables.ActRuExecution.ActRuExecutionPath
import emented.jooq.main.tables.ActRuJobdef.ActRuJobdefPath
import emented.jooq.main.tables.records.ActRuIncidentRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActRuIncident(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActRuIncidentRecord>?,
    parentPath: InverseForeignKey<out Record, ActRuIncidentRecord>?,
    aliased: Table<ActRuIncidentRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActRuIncidentRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ru_incident</code>
         */
        val ACT_RU_INCIDENT: ActRuIncident = ActRuIncident()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActRuIncidentRecord> = ActRuIncidentRecord::class.java

    /**
     * The column <code>public.act_ru_incident.id_</code>.
     */
    val ID_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_incident.rev_</code>.
     */
    val REV_: TableField<ActRuIncidentRecord, Int?> =
        createField(DSL.name("rev_"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.act_ru_incident.incident_timestamp_</code>.
     */
    val INCIDENT_TIMESTAMP_: TableField<ActRuIncidentRecord, LocalDateTime?> =
        createField(DSL.name("incident_timestamp_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_incident.incident_msg_</code>.
     */
    val INCIDENT_MSG_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("incident_msg_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_ru_incident.incident_type_</code>.
     */
    val INCIDENT_TYPE_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("incident_type_"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_incident.execution_id_</code>.
     */
    val EXECUTION_ID_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_incident.activity_id_</code>.
     */
    val ACTIVITY_ID_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("activity_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_incident.failed_activity_id_</code>.
     */
    val FAILED_ACTIVITY_ID_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("failed_activity_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_incident.proc_inst_id_</code>.
     */
    val PROC_INST_ID_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_incident.proc_def_id_</code>.
     */
    val PROC_DEF_ID_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_incident.cause_incident_id_</code>.
     */
    val CAUSE_INCIDENT_ID_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("cause_incident_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_incident.root_cause_incident_id_</code>.
     */
    val ROOT_CAUSE_INCIDENT_ID_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("root_cause_incident_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_incident.configuration_</code>.
     */
    val CONFIGURATION_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("configuration_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_ru_incident.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_incident.job_def_id_</code>.
     */
    val JOB_DEF_ID_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("job_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_incident.annotation_</code>.
     */
    val ANNOTATION_: TableField<ActRuIncidentRecord, String?> =
        createField(DSL.name("annotation_"), SQLDataType.VARCHAR(4000), this, "")

    private constructor(alias: Name, aliased: Table<ActRuIncidentRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuIncidentRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuIncidentRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ru_incident</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ru_incident</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ru_incident</code> table reference
     */
    constructor() : this(DSL.name("act_ru_incident"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActRuIncidentRecord>?,
        parentPath: InverseForeignKey<out Record, ActRuIncidentRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_RU_INCIDENT,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActRuIncidentPath : ActRuIncident, Path<ActRuIncidentRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActRuIncidentRecord>?,
            parentPath: InverseForeignKey<out Record, ActRuIncidentRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActRuIncidentRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActRuIncidentPath = ActRuIncidentPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActRuIncidentPath = ActRuIncidentPath(alias, this)
        override fun `as`(alias: Table<*>): ActRuIncidentPath = ActRuIncidentPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(
        ACT_IDX_INC_CAUSEINCID,
        ACT_IDX_INC_CONFIGURATION,
        ACT_IDX_INC_EXID,
        ACT_IDX_INC_JOB_DEF,
        ACT_IDX_INC_PROCDEFID,
        ACT_IDX_INC_PROCINSTID,
        ACT_IDX_INC_ROOTCAUSEINCID,
        ACT_IDX_INC_TENANT_ID
    )

    override fun getPrimaryKey(): UniqueKey<ActRuIncidentRecord> = ACT_RU_INCIDENT_PKEY
    override fun getReferences(): List<ForeignKey<ActRuIncidentRecord, *>> = listOf(
        ACT_RU_INCIDENT__ACT_FK_INC_EXE,
        ACT_RU_INCIDENT__ACT_FK_INC_PROCINST,
        ACT_RU_INCIDENT__ACT_FK_INC_PROCDEF,
        ACT_RU_INCIDENT__ACT_FK_INC_CAUSE,
        ACT_RU_INCIDENT__ACT_FK_INC_RCAUSE,
        ACT_RU_INCIDENT__ACT_FK_INC_JOB_DEF
    )

    private lateinit var _actFkIncExe: ActRuExecutionPath

    /**
     * Get the implicit join path to the <code>public.act_ru_execution</code>
     * table, via the <code>act_fk_inc_exe</code> key.
     */
    fun actFkIncExe(): ActRuExecutionPath {
        if (!this::_actFkIncExe.isInitialized)
            _actFkIncExe = ActRuExecutionPath(this, ACT_RU_INCIDENT__ACT_FK_INC_EXE, null)

        return _actFkIncExe
    }

    val actFkIncExe: ActRuExecutionPath
        get(): ActRuExecutionPath = actFkIncExe()

    private lateinit var _actFkIncProcinst: ActRuExecutionPath

    /**
     * Get the implicit join path to the <code>public.act_ru_execution</code>
     * table, via the <code>act_fk_inc_procinst</code> key.
     */
    fun actFkIncProcinst(): ActRuExecutionPath {
        if (!this::_actFkIncProcinst.isInitialized)
            _actFkIncProcinst = ActRuExecutionPath(this, ACT_RU_INCIDENT__ACT_FK_INC_PROCINST, null)

        return _actFkIncProcinst
    }

    val actFkIncProcinst: ActRuExecutionPath
        get(): ActRuExecutionPath = actFkIncProcinst()

    private lateinit var _actReProcdef: ActReProcdefPath

    /**
     * Get the implicit join path to the <code>public.act_re_procdef</code>
     * table.
     */
    fun actReProcdef(): ActReProcdefPath {
        if (!this::_actReProcdef.isInitialized)
            _actReProcdef = ActReProcdefPath(this, ACT_RU_INCIDENT__ACT_FK_INC_PROCDEF, null)

        return _actReProcdef
    }

    val actReProcdef: ActReProcdefPath
        get(): ActReProcdefPath = actReProcdef()

    private lateinit var _actFkIncCause: ActRuIncidentPath

    /**
     * Get the implicit join path to the <code>public.act_ru_incident</code>
     * table, via the <code>act_fk_inc_cause</code> key.
     */
    fun actFkIncCause(): ActRuIncidentPath {
        if (!this::_actFkIncCause.isInitialized)
            _actFkIncCause = ActRuIncidentPath(this, ACT_RU_INCIDENT__ACT_FK_INC_CAUSE, null)

        return _actFkIncCause
    }

    val actFkIncCause: ActRuIncidentPath
        get(): ActRuIncidentPath = actFkIncCause()

    private lateinit var _actFkIncRcause: ActRuIncidentPath

    /**
     * Get the implicit join path to the <code>public.act_ru_incident</code>
     * table, via the <code>act_fk_inc_rcause</code> key.
     */
    fun actFkIncRcause(): ActRuIncidentPath {
        if (!this::_actFkIncRcause.isInitialized)
            _actFkIncRcause = ActRuIncidentPath(this, ACT_RU_INCIDENT__ACT_FK_INC_RCAUSE, null)

        return _actFkIncRcause
    }

    val actFkIncRcause: ActRuIncidentPath
        get(): ActRuIncidentPath = actFkIncRcause()

    private lateinit var _actRuJobdef: ActRuJobdefPath

    /**
     * Get the implicit join path to the <code>public.act_ru_jobdef</code>
     * table.
     */
    fun actRuJobdef(): ActRuJobdefPath {
        if (!this::_actRuJobdef.isInitialized)
            _actRuJobdef = ActRuJobdefPath(this, ACT_RU_INCIDENT__ACT_FK_INC_JOB_DEF, null)

        return _actRuJobdef
    }

    val actRuJobdef: ActRuJobdefPath
        get(): ActRuJobdefPath = actRuJobdef()

    override fun `as`(alias: String): ActRuIncident = ActRuIncident(DSL.name(alias), this)
    override fun `as`(alias: Name): ActRuIncident = ActRuIncident(alias, this)
    override fun `as`(alias: Table<*>): ActRuIncident = ActRuIncident(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActRuIncident = ActRuIncident(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActRuIncident = ActRuIncident(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActRuIncident = ActRuIncident(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActRuIncident =
        ActRuIncident(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActRuIncident = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActRuIncident = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActRuIncident = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActRuIncident = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActRuIncident = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActRuIncident =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActRuIncident =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActRuIncident = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActRuIncident = where(DSL.notExists(select))
}
