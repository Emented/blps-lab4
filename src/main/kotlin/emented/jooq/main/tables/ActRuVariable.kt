/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_BATCH_ID
import emented.jooq.main.indexes.ACT_IDX_VARIABLE_TASK_ID
import emented.jooq.main.indexes.ACT_IDX_VARIABLE_TASK_NAME_TYPE
import emented.jooq.main.indexes.ACT_IDX_VARIABLE_TENANT_ID
import emented.jooq.main.indexes.ACT_IDX_VAR_BYTEARRAY
import emented.jooq.main.indexes.ACT_IDX_VAR_CASE_EXE
import emented.jooq.main.indexes.ACT_IDX_VAR_CASE_INST_ID
import emented.jooq.main.indexes.ACT_IDX_VAR_EXE
import emented.jooq.main.indexes.ACT_IDX_VAR_PROCINST
import emented.jooq.main.keys.ACT_RU_VARIABLE_PKEY
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_BATCH
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_BYTEARRAY
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_CASE_EXE
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_CASE_INST
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_EXE
import emented.jooq.main.keys.ACT_RU_VARIABLE__ACT_FK_VAR_PROCINST
import emented.jooq.main.keys.ACT_UNIQ_VARIABLE
import emented.jooq.main.tables.ActGeBytearray.ActGeBytearrayPath
import emented.jooq.main.tables.ActRuBatch.ActRuBatchPath
import emented.jooq.main.tables.ActRuCaseExecution.ActRuCaseExecutionPath
import emented.jooq.main.tables.ActRuExecution.ActRuExecutionPath
import emented.jooq.main.tables.records.ActRuVariableRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActRuVariable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActRuVariableRecord>?,
    parentPath: InverseForeignKey<out Record, ActRuVariableRecord>?,
    aliased: Table<ActRuVariableRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActRuVariableRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_ru_variable</code>
         */
        val ACT_RU_VARIABLE: ActRuVariable = ActRuVariable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActRuVariableRecord> = ActRuVariableRecord::class.java

    /**
     * The column <code>public.act_ru_variable.id_</code>.
     */
    val ID_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_variable.rev_</code>.
     */
    val REV_: TableField<ActRuVariableRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_ru_variable.type_</code>.
     */
    val TYPE_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("type_"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_variable.name_</code>.
     */
    val NAME_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("name_"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.act_ru_variable.execution_id_</code>.
     */
    val EXECUTION_ID_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_variable.proc_inst_id_</code>.
     */
    val PROC_INST_ID_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_variable.proc_def_id_</code>.
     */
    val PROC_DEF_ID_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_variable.case_execution_id_</code>.
     */
    val CASE_EXECUTION_ID_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("case_execution_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_variable.case_inst_id_</code>.
     */
    val CASE_INST_ID_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_variable.task_id_</code>.
     */
    val TASK_ID_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("task_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_variable.batch_id_</code>.
     */
    val BATCH_ID_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("batch_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_variable.bytearray_id_</code>.
     */
    val BYTEARRAY_ID_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("bytearray_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_variable.double_</code>.
     */
    val DOUBLE_: TableField<ActRuVariableRecord, Double?> =
        createField(DSL.name("double_"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.act_ru_variable.long_</code>.
     */
    val LONG_: TableField<ActRuVariableRecord, Long?> = createField(DSL.name("long_"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.act_ru_variable.text_</code>.
     */
    val TEXT_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("text_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_ru_variable.text2_</code>.
     */
    val TEXT2_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("text2_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_ru_variable.var_scope_</code>.
     */
    val VAR_SCOPE_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("var_scope_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_ru_variable.sequence_counter_</code>.
     */
    val SEQUENCE_COUNTER_: TableField<ActRuVariableRecord, Long?> =
        createField(DSL.name("sequence_counter_"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.act_ru_variable.is_concurrent_local_</code>.
     */
    val IS_CONCURRENT_LOCAL_: TableField<ActRuVariableRecord, Boolean?> =
        createField(DSL.name("is_concurrent_local_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_ru_variable.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActRuVariableRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<ActRuVariableRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuVariableRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActRuVariableRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_ru_variable</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_ru_variable</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_ru_variable</code> table reference
     */
    constructor() : this(DSL.name("act_ru_variable"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActRuVariableRecord>?,
        parentPath: InverseForeignKey<out Record, ActRuVariableRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_RU_VARIABLE,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActRuVariablePath : ActRuVariable, Path<ActRuVariableRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActRuVariableRecord>?,
            parentPath: InverseForeignKey<out Record, ActRuVariableRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActRuVariableRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActRuVariablePath = ActRuVariablePath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActRuVariablePath = ActRuVariablePath(alias, this)
        override fun `as`(alias: Table<*>): ActRuVariablePath = ActRuVariablePath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(
        ACT_IDX_BATCH_ID,
        ACT_IDX_VAR_BYTEARRAY,
        ACT_IDX_VAR_CASE_EXE,
        ACT_IDX_VAR_CASE_INST_ID,
        ACT_IDX_VAR_EXE,
        ACT_IDX_VAR_PROCINST,
        ACT_IDX_VARIABLE_TASK_ID,
        ACT_IDX_VARIABLE_TASK_NAME_TYPE,
        ACT_IDX_VARIABLE_TENANT_ID
    )

    override fun getPrimaryKey(): UniqueKey<ActRuVariableRecord> = ACT_RU_VARIABLE_PKEY
    override fun getUniqueKeys(): List<UniqueKey<ActRuVariableRecord>> = listOf(ACT_UNIQ_VARIABLE)
    override fun getReferences(): List<ForeignKey<ActRuVariableRecord, *>> = listOf(
        ACT_RU_VARIABLE__ACT_FK_VAR_EXE,
        ACT_RU_VARIABLE__ACT_FK_VAR_PROCINST,
        ACT_RU_VARIABLE__ACT_FK_VAR_CASE_EXE,
        ACT_RU_VARIABLE__ACT_FK_VAR_CASE_INST,
        ACT_RU_VARIABLE__ACT_FK_VAR_BATCH,
        ACT_RU_VARIABLE__ACT_FK_VAR_BYTEARRAY
    )

    private lateinit var _actFkVarExe: ActRuExecutionPath

    /**
     * Get the implicit join path to the <code>public.act_ru_execution</code>
     * table, via the <code>act_fk_var_exe</code> key.
     */
    fun actFkVarExe(): ActRuExecutionPath {
        if (!this::_actFkVarExe.isInitialized)
            _actFkVarExe = ActRuExecutionPath(this, ACT_RU_VARIABLE__ACT_FK_VAR_EXE, null)

        return _actFkVarExe
    }

    val actFkVarExe: ActRuExecutionPath
        get(): ActRuExecutionPath = actFkVarExe()

    private lateinit var _actFkVarProcinst: ActRuExecutionPath

    /**
     * Get the implicit join path to the <code>public.act_ru_execution</code>
     * table, via the <code>act_fk_var_procinst</code> key.
     */
    fun actFkVarProcinst(): ActRuExecutionPath {
        if (!this::_actFkVarProcinst.isInitialized)
            _actFkVarProcinst = ActRuExecutionPath(this, ACT_RU_VARIABLE__ACT_FK_VAR_PROCINST, null)

        return _actFkVarProcinst
    }

    val actFkVarProcinst: ActRuExecutionPath
        get(): ActRuExecutionPath = actFkVarProcinst()

    private lateinit var _actFkVarCaseExe: ActRuCaseExecutionPath

    /**
     * Get the implicit join path to the
     * <code>public.act_ru_case_execution</code> table, via the
     * <code>act_fk_var_case_exe</code> key.
     */
    fun actFkVarCaseExe(): ActRuCaseExecutionPath {
        if (!this::_actFkVarCaseExe.isInitialized)
            _actFkVarCaseExe = ActRuCaseExecutionPath(this, ACT_RU_VARIABLE__ACT_FK_VAR_CASE_EXE, null)

        return _actFkVarCaseExe
    }

    val actFkVarCaseExe: ActRuCaseExecutionPath
        get(): ActRuCaseExecutionPath = actFkVarCaseExe()

    private lateinit var _actFkVarCaseInst: ActRuCaseExecutionPath

    /**
     * Get the implicit join path to the
     * <code>public.act_ru_case_execution</code> table, via the
     * <code>act_fk_var_case_inst</code> key.
     */
    fun actFkVarCaseInst(): ActRuCaseExecutionPath {
        if (!this::_actFkVarCaseInst.isInitialized)
            _actFkVarCaseInst = ActRuCaseExecutionPath(this, ACT_RU_VARIABLE__ACT_FK_VAR_CASE_INST, null)

        return _actFkVarCaseInst
    }

    val actFkVarCaseInst: ActRuCaseExecutionPath
        get(): ActRuCaseExecutionPath = actFkVarCaseInst()

    private lateinit var _actRuBatch: ActRuBatchPath

    /**
     * Get the implicit join path to the <code>public.act_ru_batch</code> table.
     */
    fun actRuBatch(): ActRuBatchPath {
        if (!this::_actRuBatch.isInitialized)
            _actRuBatch = ActRuBatchPath(this, ACT_RU_VARIABLE__ACT_FK_VAR_BATCH, null)

        return _actRuBatch
    }

    val actRuBatch: ActRuBatchPath
        get(): ActRuBatchPath = actRuBatch()

    private lateinit var _actGeBytearray: ActGeBytearrayPath

    /**
     * Get the implicit join path to the <code>public.act_ge_bytearray</code>
     * table.
     */
    fun actGeBytearray(): ActGeBytearrayPath {
        if (!this::_actGeBytearray.isInitialized)
            _actGeBytearray = ActGeBytearrayPath(this, ACT_RU_VARIABLE__ACT_FK_VAR_BYTEARRAY, null)

        return _actGeBytearray
    }

    val actGeBytearray: ActGeBytearrayPath
        get(): ActGeBytearrayPath = actGeBytearray()

    override fun `as`(alias: String): ActRuVariable = ActRuVariable(DSL.name(alias), this)
    override fun `as`(alias: Name): ActRuVariable = ActRuVariable(alias, this)
    override fun `as`(alias: Table<*>): ActRuVariable = ActRuVariable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActRuVariable = ActRuVariable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActRuVariable = ActRuVariable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActRuVariable = ActRuVariable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActRuVariable =
        ActRuVariable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActRuVariable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActRuVariable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActRuVariable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActRuVariable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActRuVariable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActRuVariable =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActRuVariable =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActRuVariable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActRuVariable = where(DSL.notExists(select))
}
