/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_IDX_PROCDEF_DEPLOYMENT_ID
import emented.jooq.main.indexes.ACT_IDX_PROCDEF_TENANT_ID
import emented.jooq.main.indexes.ACT_IDX_PROCDEF_VER_TAG
import emented.jooq.main.keys.ACT_RE_PROCDEF_PKEY
import emented.jooq.main.keys.ACT_RU_EXECUTION__ACT_FK_EXE_PROCDEF
import emented.jooq.main.keys.ACT_RU_IDENTITYLINK__ACT_FK_ATHRZ_PROCEDEF
import emented.jooq.main.keys.ACT_RU_INCIDENT__ACT_FK_INC_PROCDEF
import emented.jooq.main.keys.ACT_RU_TASK__ACT_FK_TASK_PROCDEF
import emented.jooq.main.tables.ActRuExecution.ActRuExecutionPath
import emented.jooq.main.tables.ActRuIdentitylink.ActRuIdentitylinkPath
import emented.jooq.main.tables.ActRuIncident.ActRuIncidentPath
import emented.jooq.main.tables.ActRuTask.ActRuTaskPath
import emented.jooq.main.tables.records.ActReProcdefRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActReProcdef(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActReProcdefRecord>?,
    parentPath: InverseForeignKey<out Record, ActReProcdefRecord>?,
    aliased: Table<ActReProcdefRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActReProcdefRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_re_procdef</code>
         */
        val ACT_RE_PROCDEF: ActReProcdef = ActReProcdef()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActReProcdefRecord> = ActReProcdefRecord::class.java

    /**
     * The column <code>public.act_re_procdef.id_</code>.
     */
    val ID_: TableField<ActReProcdefRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_re_procdef.rev_</code>.
     */
    val REV_: TableField<ActReProcdefRecord, Int?> = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_re_procdef.category_</code>.
     */
    val CATEGORY_: TableField<ActReProcdefRecord, String?> =
        createField(DSL.name("category_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_re_procdef.name_</code>.
     */
    val NAME_: TableField<ActReProcdefRecord, String?> =
        createField(DSL.name("name_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_re_procdef.key_</code>.
     */
    val KEY_: TableField<ActReProcdefRecord, String?> =
        createField(DSL.name("key_"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.act_re_procdef.version_</code>.
     */
    val VERSION_: TableField<ActReProcdefRecord, Int?> =
        createField(DSL.name("version_"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.act_re_procdef.deployment_id_</code>.
     */
    val DEPLOYMENT_ID_: TableField<ActReProcdefRecord, String?> =
        createField(DSL.name("deployment_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_re_procdef.resource_name_</code>.
     */
    val RESOURCE_NAME_: TableField<ActReProcdefRecord, String?> =
        createField(DSL.name("resource_name_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_re_procdef.dgrm_resource_name_</code>.
     */
    val DGRM_RESOURCE_NAME_: TableField<ActReProcdefRecord, String?> =
        createField(DSL.name("dgrm_resource_name_"), SQLDataType.VARCHAR(4000), this, "")

    /**
     * The column <code>public.act_re_procdef.has_start_form_key_</code>.
     */
    val HAS_START_FORM_KEY_: TableField<ActReProcdefRecord, Boolean?> =
        createField(DSL.name("has_start_form_key_"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.act_re_procdef.suspension_state_</code>.
     */
    val SUSPENSION_STATE_: TableField<ActReProcdefRecord, Int?> =
        createField(DSL.name("suspension_state_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_re_procdef.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActReProcdefRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_re_procdef.version_tag_</code>.
     */
    val VERSION_TAG_: TableField<ActReProcdefRecord, String?> =
        createField(DSL.name("version_tag_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_re_procdef.history_ttl_</code>.
     */
    val HISTORY_TTL_: TableField<ActReProcdefRecord, Int?> =
        createField(DSL.name("history_ttl_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_re_procdef.startable_</code>.
     */
    val STARTABLE_: TableField<ActReProcdefRecord, Boolean?> = createField(
        DSL.name("startable_"),
        SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)),
        this,
        ""
    )

    private constructor(alias: Name, aliased: Table<ActReProcdefRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActReProcdefRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActReProcdefRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_re_procdef</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_re_procdef</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_re_procdef</code> table reference
     */
    constructor() : this(DSL.name("act_re_procdef"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, ActReProcdefRecord>?,
        parentPath: InverseForeignKey<out Record, ActReProcdefRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        ACT_RE_PROCDEF,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ActReProcdefPath : ActReProcdef, Path<ActReProcdefRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, ActReProcdefRecord>?,
            parentPath: InverseForeignKey<out Record, ActReProcdefRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<ActReProcdefRecord>) : super(alias, aliased)

        override fun `as`(alias: String): ActReProcdefPath = ActReProcdefPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ActReProcdefPath = ActReProcdefPath(alias, this)
        override fun `as`(alias: Table<*>): ActReProcdefPath = ActReProcdefPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> =
        listOf(ACT_IDX_PROCDEF_DEPLOYMENT_ID, ACT_IDX_PROCDEF_TENANT_ID, ACT_IDX_PROCDEF_VER_TAG)

    override fun getPrimaryKey(): UniqueKey<ActReProcdefRecord> = ACT_RE_PROCDEF_PKEY

    private lateinit var _actRuExecution: ActRuExecutionPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_execution</code> table
     */
    fun actRuExecution(): ActRuExecutionPath {
        if (!this::_actRuExecution.isInitialized)
            _actRuExecution = ActRuExecutionPath(this, null, ACT_RU_EXECUTION__ACT_FK_EXE_PROCDEF.inverseKey)

        return _actRuExecution
    }

    val actRuExecution: ActRuExecutionPath
        get(): ActRuExecutionPath = actRuExecution()

    private lateinit var _actRuIdentitylink: ActRuIdentitylinkPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_identitylink</code> table
     */
    fun actRuIdentitylink(): ActRuIdentitylinkPath {
        if (!this::_actRuIdentitylink.isInitialized)
            _actRuIdentitylink =
                ActRuIdentitylinkPath(this, null, ACT_RU_IDENTITYLINK__ACT_FK_ATHRZ_PROCEDEF.inverseKey)

        return _actRuIdentitylink
    }

    val actRuIdentitylink: ActRuIdentitylinkPath
        get(): ActRuIdentitylinkPath = actRuIdentitylink()

    private lateinit var _actRuIncident: ActRuIncidentPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.act_ru_incident</code> table
     */
    fun actRuIncident(): ActRuIncidentPath {
        if (!this::_actRuIncident.isInitialized)
            _actRuIncident = ActRuIncidentPath(this, null, ACT_RU_INCIDENT__ACT_FK_INC_PROCDEF.inverseKey)

        return _actRuIncident
    }

    val actRuIncident: ActRuIncidentPath
        get(): ActRuIncidentPath = actRuIncident()

    private lateinit var _actRuTask: ActRuTaskPath

    /**
     * Get the implicit to-many join path to the <code>public.act_ru_task</code>
     * table
     */
    fun actRuTask(): ActRuTaskPath {
        if (!this::_actRuTask.isInitialized)
            _actRuTask = ActRuTaskPath(this, null, ACT_RU_TASK__ACT_FK_TASK_PROCDEF.inverseKey)

        return _actRuTask
    }

    val actRuTask: ActRuTaskPath
        get(): ActRuTaskPath = actRuTask()

    override fun `as`(alias: String): ActReProcdef = ActReProcdef(DSL.name(alias), this)
    override fun `as`(alias: Name): ActReProcdef = ActReProcdef(alias, this)
    override fun `as`(alias: Table<*>): ActReProcdef = ActReProcdef(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActReProcdef = ActReProcdef(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActReProcdef = ActReProcdef(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActReProcdef = ActReProcdef(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActReProcdef =
        ActReProcdef(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActReProcdef = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActReProcdef = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActReProcdef = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActReProcdef = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActReProcdef = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActReProcdef =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActReProcdef =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActReProcdef = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActReProcdef = where(DSL.notExists(select))
}
