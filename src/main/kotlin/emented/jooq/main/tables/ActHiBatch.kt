/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables

import emented.jooq.main.Public
import emented.jooq.main.indexes.ACT_HI_BAT_RM_TIME
import emented.jooq.main.keys.ACT_HI_BATCH_PKEY
import emented.jooq.main.tables.records.ActHiBatchRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActHiBatch(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ActHiBatchRecord>?,
    parentPath: InverseForeignKey<out Record, ActHiBatchRecord>?,
    aliased: Table<ActHiBatchRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<ActHiBatchRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.act_hi_batch</code>
         */
        val ACT_HI_BATCH: ActHiBatch = ActHiBatch()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActHiBatchRecord> = ActHiBatchRecord::class.java

    /**
     * The column <code>public.act_hi_batch.id_</code>.
     */
    val ID_: TableField<ActHiBatchRecord, String?> =
        createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_batch.type_</code>.
     */
    val TYPE_: TableField<ActHiBatchRecord, String?> =
        createField(DSL.name("type_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_batch.total_jobs_</code>.
     */
    val TOTAL_JOBS_: TableField<ActHiBatchRecord, Int?> =
        createField(DSL.name("total_jobs_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_hi_batch.jobs_per_seed_</code>.
     */
    val JOBS_PER_SEED_: TableField<ActHiBatchRecord, Int?> =
        createField(DSL.name("jobs_per_seed_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_hi_batch.invocations_per_job_</code>.
     */
    val INVOCATIONS_PER_JOB_: TableField<ActHiBatchRecord, Int?> =
        createField(DSL.name("invocations_per_job_"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.act_hi_batch.seed_job_def_id_</code>.
     */
    val SEED_JOB_DEF_ID_: TableField<ActHiBatchRecord, String?> =
        createField(DSL.name("seed_job_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_batch.monitor_job_def_id_</code>.
     */
    val MONITOR_JOB_DEF_ID_: TableField<ActHiBatchRecord, String?> =
        createField(DSL.name("monitor_job_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_batch.batch_job_def_id_</code>.
     */
    val BATCH_JOB_DEF_ID_: TableField<ActHiBatchRecord, String?> =
        createField(DSL.name("batch_job_def_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_batch.tenant_id_</code>.
     */
    val TENANT_ID_: TableField<ActHiBatchRecord, String?> =
        createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>public.act_hi_batch.create_user_id_</code>.
     */
    val CREATE_USER_ID_: TableField<ActHiBatchRecord, String?> =
        createField(DSL.name("create_user_id_"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.act_hi_batch.start_time_</code>.
     */
    val START_TIME_: TableField<ActHiBatchRecord, LocalDateTime?> =
        createField(DSL.name("start_time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.act_hi_batch.end_time_</code>.
     */
    val END_TIME_: TableField<ActHiBatchRecord, LocalDateTime?> =
        createField(DSL.name("end_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_hi_batch.removal_time_</code>.
     */
    val REMOVAL_TIME_: TableField<ActHiBatchRecord, LocalDateTime?> =
        createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.act_hi_batch.exec_start_time_</code>.
     */
    val EXEC_START_TIME_: TableField<ActHiBatchRecord, LocalDateTime?> =
        createField(DSL.name("exec_start_time_"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<ActHiBatchRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<ActHiBatchRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<ActHiBatchRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.act_hi_batch</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.act_hi_batch</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.act_hi_batch</code> table reference
     */
    constructor() : this(DSL.name("act_hi_batch"), null)

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(ACT_HI_BAT_RM_TIME)
    override fun getPrimaryKey(): UniqueKey<ActHiBatchRecord> = ACT_HI_BATCH_PKEY
    override fun `as`(alias: String): ActHiBatch = ActHiBatch(DSL.name(alias), this)
    override fun `as`(alias: Name): ActHiBatch = ActHiBatch(alias, this)
    override fun `as`(alias: Table<*>): ActHiBatch = ActHiBatch(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActHiBatch = ActHiBatch(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActHiBatch = ActHiBatch(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ActHiBatch = ActHiBatch(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ActHiBatch =
        ActHiBatch(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ActHiBatch = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ActHiBatch = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ActHiBatch = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): ActHiBatch = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): ActHiBatch = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ActHiBatch =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ActHiBatch =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ActHiBatch = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ActHiBatch = where(DSL.notExists(select))
}
